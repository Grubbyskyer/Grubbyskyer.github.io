<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[Xing's Blog]]></title>
  <subtitle><![CDATA[人生的乐趣就在于永不休止地折腾、折腾、折腾...]]></subtitle>
  <link href="/atom.xml" rel="self"/>
  <link href="http://yoursite.com/"/>
  <updated>2015-10-26T13:52:29.094Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name><![CDATA[TIAN Xing]]></name>
    <email><![CDATA[296065540@qq.com]]></email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title><![CDATA[Stanford Machine Learning Week3- -Logistic Regression and Regularization]]></title>
    <link href="http://yoursite.com/2015/10/26/Stanford%20Machine%20Learning%20Week3-%20-Logistic%20Regression%20and%20Regularization/"/>
    <id>http://yoursite.com/2015/10/26/Stanford Machine Learning Week3- -Logistic Regression and Regularization/</id>
    <published>2015-10-26T13:19:00.000Z</published>
    <updated>2015-10-26T13:52:29.094Z</updated>
    <content type="html"><![CDATA[<p>第三周讲了第一个分类算法- -<code>逻辑回归</code>，逻辑回归虽然名字里面包含了回归两个字，但其实它是一个分类算法。参考Wiki上对Logistic Regression的定义：</p>
<blockquote>
<p>In statistics, logistic regression is a regression model where the dependent variable (DV) is categorical. —wiki </p>
</blockquote>
<p>本周课程从最基本的二元分类讲起，引入了<code>sigmoid</code>函数，逻辑回归的<code>cost function</code>和参数学习的方法，然后介绍了将二元分类拓展到多元分类的<code>one-vs-all</code>方法，最后针对模型存在的<code>过拟合(overfitting)</code>问题介绍了<code>正则化(regularization)</code>。<br><a id="more"></a></p>
<h2 id="Classification_and_Representation">Classification and Representation</h2><h3 id="Classification">Classification</h3><p><img src="http://7xj2nk.com1.z0.glb.clouddn.com/2015-10-26-1.png" alt=""><br>我们在日常生活中肯定遇见过这样的系统，判断是否是垃圾邮件、是否是网上诈骗、是否是恶性肿瘤，这里的因变量（或者叫做预测值）不再像线性回归中的房价预测模型中的因变量那样是连续的值，而是一些<strong>离散的值</strong>。<br>比如在上述的三个例子中，我们想得到的结果都只有是和否两个值，在数学上表示也就是 $y\in\{0, 1\}$。一般情况下，哪个用0表示，哪个用1表示是任意的(arbitrary)，但是习惯上，我们用0表示<code>negative class</code>，用1表示<code>positive class</code>，比如我们想判断一封邮件是不是垃圾邮件，则0表示不是(absence)垃圾邮件，1表示是(presence)垃圾邮件。<br>当然了，很多问题上结果不只是两类，比如邮箱的邮件自动分类系统，有家人、朋友、同学等等，此时$y\in\{0, 1, 2, \cdots,n\}$，后面会有一个算法来将二元分类拓展到多元分类上，现在先来看最基础的二元分类。<br><img src="http://7xj2nk.com1.z0.glb.clouddn.com/2015-10-26-2.png" alt=""><br>还是根据肿瘤大小预测癌症的例子，如果只有左边那8个点，我们像线性回归那样将它们画到坐标系中，然后应用线性回归，我们可能得到的是图中那条粉色斜线，在预测时，根据此模型算出 $h_\theta(x)$，如果 $h_\theta(x) \geqslant 0.5$，则预测为1，否则预测为0，只看x的话，也就是竖直蓝线右边预测为1，否则预测为0。这样看起来好像是正确的，但是其实这只是碰巧，我们在训练集中再加一个样本（最右边的那个点）。此时应用线性回归我们得到的模型可能就是图中那条靠右的蓝线，这个模型显然有很大的误差。</p>
<p>而且结果y只有0和1两个值，我们的模型如果得到 $h_\theta(x) &gt; 1$ 或者 $h_\theta(x) &lt; 0$ 总归是有点奇怪，我们需要一个模型，它预测出来的 $h_\theta(x)$ 应该在0~1之间。</p>
<h3 id="Hypothesis_Representation">Hypothesis Representation</h3><p><img src="http://7xj2nk.com1.z0.glb.clouddn.com/2015-10-26-4.png" alt=""><br>既然我们想要 $0 \leqslant h_\theta(x) \leqslant 1$，所以我们需要一个函数将输入值映射到0~1之间，这里就引入了<code>sigmoid</code>函数：<br>$$g(z) = \frac{1}{1 + e^{-z}}$$<br><img src="http://7xj2nk.com1.z0.glb.clouddn.com/2015-10-26-10.png" alt=""><br>此时我们的模型 $h_\theta(x)$ 由 $h_\theta(x) = \theta^T x$ 变为了 $h_\theta(x) = g(\theta^T x) = \frac{1}{1 + e^{-\theta^T x}}$ ，这样得到的值就在0~1之间了。<br><img src="http://7xj2nk.com1.z0.glb.clouddn.com/2015-10-26-5.png" alt=""><br>我们来看一下，得到的 $h_\theta(x)$ 的值的意义。实际上，这个值代表了给定x的条件下y=1的概率，数学表示就是：<br>$$h_\theta(x) = P(y = 1\mid x ; \theta)$$<br>注意公式中间用了<code>;</code>表示这里的 $\theta$ 是一个参数，而不是条件，也就是说这里用的是经典概率论而不是贝叶斯概率论。</p>
<h3 id="Decision_Boundary">Decision Boundary</h3><p><img src="http://7xj2nk.com1.z0.glb.clouddn.com/2015-10-26-7.png" alt=""><br>根据我们的模型，$h_\theta(x) \geqslant 0.5$ 则预测 $y = 1$，亦即 $\theta^T x \geqslant 0$，同样地，$h_\theta(x) &lt; 0.5$ 等价于 $\theta^T x &lt; 0$，那么 $\theta^T x = 0$ 这条线就是我们根据此模型得出的分界线，叫做<code>decision boundary</code>。除了线性的分界线，如果选择高次项作为特征项，可以得到非线性的分界线，如下图所示。<br><img src="http://7xj2nk.com1.z0.glb.clouddn.com/2015-10-26-8.png" alt=""></p>
<h2 id="Logistic_Regression_Model">Logistic Regression Model</h2><h3 id="Cost_Function">Cost Function</h3><p>有了模型之后我们如何定义逻辑回归的<code>cost function</code>呢？如果按照线性回归里那样定义为平方项之和，那么由于这里加了一重<code>sigmoid</code>函数，可以证明，这样得到的<code>cost function</code>将是<code>non-convex</code>，亦即<strong>非凸的</strong>，那么其将会有很多局部最小值，从而无法用梯度下降等算法求解，见下图左侧样图。<br><img src="http://7xj2nk.com1.z0.glb.clouddn.com/2015-10-26-11.png" alt=""><br>因此我们需要找到一个<strong>convex</strong>的函数，那么可以定义<code>Cost</code>为如下形式：<br>$$Cost(h_\theta(x), y) = \begin{cases}\begin{aligned}<br>-log(h_\theta(x))  \quad  if \, y \,&amp;= 1\\<br>-log(1 - h_\theta(x))  \quad  if \, y \,&amp;= 0<br>\end{aligned}<br>\end{cases}$$<br>可以用凸函数的定义证明，这样定义的<code>cost function</code>是满足凸性的。</p>
<h3 id="Simplified_Cost_Function_and_Gradient_Descent">Simplified Cost Function and Gradient Descent</h3><p><img src="http://7xj2nk.com1.z0.glb.clouddn.com/2015-10-26-13.png" alt=""><br>注意到上面<code>Cost</code>的形式，其中y只能取0或1，我们可以把它写成一个式子：<br>$$Cost(h_\theta(x),y) = -y \cdot log(h_\theta(x)) - (1-y) \cdot log(1 - h_\theta(x))$$<br>如果一时没有看明白的话，可以手动取y=1和y=0模拟一下，就会发现和上面分开写的结果是一样的。<br>这样我们的损失函数 $J(\theta)$ 就可以写为如下形式：<br>$$J(\theta) = -\frac{1}{m}\sum_{i = 1}^{m}(y^{(i)} \cdot log(h_\theta(x^{(i)})) + (1-y^{(i)}) \cdot log(1 - h_\theta(x^{(i)})))$$<br>接下来还是应用梯度下降算法去计算 $\theta$ 的值。<br><img src="http://7xj2nk.com1.z0.glb.clouddn.com/2015-10-26-14.png" alt=""><br>参数更新的过程和线性回归一样，也需要计算 $\frac{\partial J(\theta)}{\partial\theta_{j}}$，由于 $-\frac{1}{m}$ 和 $y^{(i)}$ 在对 $\theta_j$ 求偏导数时都是常数，所以我们只用看 $log(h_\theta(x^{(i)}))$ 和 $log(1 - h_\theta(x^{(i)}))$，注意到 $h_\theta(x) = \frac{1}{1 + e^{-\theta^T x}}$，应用复合函数求导法则即可得结果。这里以前者为例：<br>$$\begin{aligned}<br>\frac{\partial}{\partial \theta_j} log(h_\theta(x)) \,&amp;= \frac{1}{h_\theta(x)}\cdot (h_\theta(x))’ \\<br>&amp;= \frac{1}{h_\theta(x)}\cdot \frac{-1}{(1 + e^{-\theta^T x})^2} \cdot (1+e^{-\theta^T x})’ \\<br>&amp;= \frac{1}{h_\theta(x)}\cdot \frac{-1}{(1 + e^{-\theta^T x})^2} \cdot (-x_j)\cdot e^{-\theta^T x}\\<br>&amp;= x_j \cdot \frac{e^{-\theta^T x}}{1 + e^{-\theta^T x}}\\<br>&amp;= x_j \cdot (1-h_\theta(x))<br>\end{aligned}$$<br>同样可得：<br>$$\frac{\partial}{\partial \theta_j} log(1-h_\theta(x)) \,= -x_j \cdot h_\theta(x)$$<br>将其带入到 $J(\theta)$ 里，可得：<br>$$\frac{\partial J(\theta)}{\partial\theta_{j}} = \frac{1}{m}\sum_{i = 1}^{m}(h_\theta(x^{(i)})-y^{(i)})\cdot x_j^{(i)}$$<br>那么 $\theta_j$ 的更新过程为：<br>$$\theta_j := \theta_j - \alpha \cdot  \frac{1}{m}\sum_{i = 1}^{m}(h_\theta(x^{(i)})-y^{(i)})\cdot x_j^{(i)}$$<br>是否感觉这个式子很眼熟呢？好像和线性回归里面的式子一模一样啊，怎么回事，我们开头不是还说不能用线性回归吗？其实这两个式子只是形式上一样，但其是<strong>完全不同</strong>的。因为在线性回归中，$h_\theta(x) = \theta^T x$，而在逻辑回归中，$h_\theta(x) = sigmoid(\theta^T x)$。<br>还需要提一点的是，在逻辑回归中，<code>feature scaling</code>仍然是很有效的令迭代速度加快的方法。</p>
<h3 id="Advanced_Optimization">Advanced Optimization</h3><p>求解参数 $\theta$ 的方法除了梯度下降外，还有很多比较高级的方法，当然也更复杂，如下：<br><img src="http://7xj2nk.com1.z0.glb.clouddn.com/2015-10-26-16.png" alt=""><br>共轭梯度法，拟牛顿法等等。它们的优点是：①不需要手动选择学习率；②比梯度下降更快（事实上，在最优化里讲过，这些高级的方法具有<strong>二次终止性</strong>，而梯度下降算法不具备此性质）。当然，缺点是比较复杂，自己实现的话容易出错。不过好在有库函数这个东西。。。<br><img src="http://7xj2nk.com1.z0.glb.clouddn.com/2015-10-26-17.png" alt=""><br>如上图所示，我们只需要在<code>costfunction</code>函数的编写过程中，顺便返回对各个参数的偏导数，然后调用库函数就行了，具体地，会在下面的编程作业中看到其应用。</p>
<h2 id="Multiclass_Classification">Multiclass Classification</h2><h3 id="Multiclass_Classification:_One-vs-all">Multiclass Classification: One-vs-all</h3><p>截止到目前，我们讨论的逻辑回归都只是两类的分类问题，那如何把它拓展到多类呢？有一个算法叫做<code>one-vs-all</code>或者<code>one-vs-rest</code><br><img src="http://7xj2nk.com1.z0.glb.clouddn.com/2015-10-26-18.png" alt=""><br>如上图三类的问题，我们需要训练3个模型，训练第一个模型时，把三角当作1，红叉和方框都当作0，训练出 $h_\theta^{(1)}(x)$，同理训练出 $h_\theta^{(2)}(x)$ 和 $h_\theta^{(3)}(x)$，考虑到 $h_\theta(x)$ 的概率意义：<br>$$h_\theta^{(i)}(x) = p(y=i \mid x;\theta)$$<br>所以对一个测试样例，我们算出每个模型预测的值，取其值最大者即为我们预测的结果。<br><img src="http://7xj2nk.com1.z0.glb.clouddn.com/2015-10-26-19.png" alt=""><br>对于两类的分类问题，我们只需要训练<strong>一个</strong>模型。<br>对于K(K &gt; 2)类的分类问题，需要训练<strong>K</strong>个模型。</p>
<h2 id="Regularization">Regularization</h2><h3 id="The_Problem_of_Overfitting">The Problem of Overfitting</h3><p><img src="http://7xj2nk.com1.z0.glb.clouddn.com/2015-10-26-20.png" alt=""><br>在上图的线性回归模型中，总共只有5个样本，我们分别选取1、2、4个特征建立了左中右3个模型。可以看到，左边那个模型，对于训练集的预测仍有较大的误差，这种情况叫做<code>underfit</code>或者<code>high bias</code>；中间那个模型，直观上可以看出是比较正确的模型；而右边的四次模型，虽然完美拟合了训练集中的5个样本，但是直观上可以明显知道它不是正确的，比如 size=0 时它预测的值明显是不对的。这种很好地拟合了训练集，但是在测试集上却表现很差的情况就叫做<code>overfit</code>或者<code>high variance</code>。<br><img src="http://7xj2nk.com1.z0.glb.clouddn.com/2015-10-26-21.png" alt="21"><br>这是一个逻辑回归中的例子。最右边的高次模型“丧心病狂地”拟合出了一条如此妖魔化的分界线。。。<br>那么如何解决过拟合的问题呢？<br><img src="http://7xj2nk.com1.z0.glb.clouddn.com/2015-10-26-22.png" alt=""></p>
<ol>
<li>减少模型的特征数<br>①手动选择一部分特征<br>②模型选择算法，自动帮我们选择合适的特征（后面会讲）</li>
<li>正则化<code>regularization</code><br>①保留所有的特征，但是减小模型中参数的值<br>②因为每种特征都或多或少地包含了一定信息，所以保留所有特征能最大限度地利用所有信息</li>
</ol>
<h3 id="Cost_Function-1">Cost Function</h3><p>如何减小 $\theta$ 的值呢？我们可以利用最优化理论里面的罚方法，给 $\theta$ 增加比较大的惩罚项，这里还是加的二次方的惩罚项，即正则化的损失函数为：<br>$$J_{new}(\theta) = J_{old}(\theta) + \lambda\sum_{j=1}^{n}\theta_j^2$$</p>
<ol>
<li>新加入的惩罚项为凸函数，显然新的损失函数仍然满足凸性</li>
<li>$\lambda$ 叫做<code>regularization parameter</code>，它的值会影响模型的效果</li>
<li>注意这里并没有对 $\theta_0$ 添加惩罚，加上也可以</li>
<li>考虑新的损失函数，令其取最小值，显然各个参数的值要比原来小了</li>
</ol>
<h3 id="Regularized_Linear_Regression">Regularized Linear Regression</h3><p>线性回归中使用正则化，新的<code>cost function</code>为：<br>$$J(\theta) = \frac{1}{2m}\cdot [\sum_{i=1}^{m}(h_\theta(x^{(i)}) - y^{(i)})^2 + \lambda\sum_{j=1}^{n}\theta_j^2]$$<br>应用梯度下降算法：<br><img src="http://7xj2nk.com1.z0.glb.clouddn.com/2015-10-26-24.png" alt=""><br>由于没有对 $\theta_0$ 添加惩罚，所以求偏导数时不变，而其他的参数更新过程变为：<br>$$\theta_j := \theta_j - \alpha \cdot  \frac{1}{m}[\sum_{i = 1}^{m}(h_\theta(x^{(i)})-y^{(i)})\cdot x_j^{(i)} + \frac{\lambda}{m}\cdot \theta_j]$$<br>这里如果做一个小变换，右式提取出公因子 $\theta_j$，可写成如下形式：<br>$$\theta_j := \theta_j \cdot(1 - \alpha\cdot\frac{\lambda}{m}) - \alpha \cdot  \frac{1}{m}\sum_{i = 1}^{m}(h_\theta(x^{(i)})-y^{(i)})\cdot x_j^{(i)}$$<br>由于 $\alpha$、$\lambda$、$m$ 都是正数，所以 $1 - \alpha\cdot\frac{\lambda}{m} &lt; 1$，这样可以直观地感受出来加入了正则化之后的参数确实比原来的小了，但其实它的本质还是最上面的式子- -偏导数。<br><img src="http://7xj2nk.com1.z0.glb.clouddn.com/2015-10-26-25.png" alt=""><br>讲解线性回归时候，我们还有一种求参数的方法是正规方程组。参照上一讲的推导过程，这里 $J(\theta)$ 相比原来多了 $\theta^T \theta$，所以<br>$$\frac{\partial J}{\partial \theta} = 2X^T X \theta - 2X^T y + 2\theta$$<br>令其等于0，得<br> $$\theta = (X^T X + \lambda I)^{-1}X^T y$$<br> 其中 $I$ 为单位矩阵。<br> 如果不对 $\theta_0$ 进行惩罚的话，那么最终的结果就是上图中的形式。需要注意的是，被Ng用蓝括号括起来的方阵，数学上可以证明，是<strong>一定可逆</strong>的。</p>
<h3 id="Regularized_Logistic_Regression">Regularized Logistic Regression</h3><p>逻辑回归中使用正则化，新的<code>cost function</code>为：<br>$$J(\theta) = -\frac{1}{m}\sum_{i = 1}^{m}(y^{(i)} \cdot log(h_\theta(x^{(i)})) + (1-y^{(i)}) \cdot log(1 - h_\theta(x^{(i)}))) + \frac{\lambda}{2m}\cdot\sum_{j=1}^{n}\theta_j^2$$<br>应用梯度下降算法的过程也与线性回归类似，见下图：<br><img src="http://7xj2nk.com1.z0.glb.clouddn.com/2015-10-26-27.png" alt=""><br>需要注意的是，这里的 $h_\theta(x)$ 是 $sigmoid(\theta^T x)$。</p>
<h2 id="Assignment">Assignment</h2><p>这次的作业也分为两部分，一是<code>Logistic regression</code>，二是<code>regularization</code>。</p>
<h3 id="Logistic_Regression">Logistic Regression</h3><p>这次的例子是根据一个学生两次考试的成绩判断他是否能被大学接收。<br><code>加载数据</code><br><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">data = load(<span class="string">'ex2data1.txt'</span>);</span><br><span class="line">X = data(:, <span class="matrix">[<span class="number">1</span>, <span class="number">2</span>]</span>); y = data(:, <span class="number">3</span>);</span><br></pre></td></tr></table></figure></p>
<p><code>plotData</code>- - 画出数据集<br><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">% Find Indices of Positive and Negative Examples</span></span><br><span class="line">pos = <span class="built_in">find</span>(y==<span class="number">1</span>); neg = <span class="built_in">find</span>(y == <span class="number">0</span>);</span><br><span class="line"><span class="comment">% Plot Examples</span></span><br><span class="line">plot(X(pos, <span class="number">1</span>), X(pos, <span class="number">2</span>), <span class="string">'k+'</span>,<span class="string">'LineWidth'</span>, <span class="number">2</span>, ...</span><br><span class="line"><span class="string">'MarkerSize'</span>, <span class="number">7</span>);</span><br><span class="line">plot(X(neg, <span class="number">1</span>), X(neg, <span class="number">2</span>), <span class="string">'ko'</span>, <span class="string">'MarkerFaceColor'</span>, <span class="string">'y'</span>, ...</span><br><span class="line"><span class="string">'MarkerSize'</span>, <span class="number">7</span>);</span><br><span class="line"><span class="comment">% Labels and Legend</span></span><br><span class="line">xlabel(<span class="string">'Exam 1 score'</span>)</span><br><span class="line">ylabel(<span class="string">'Exam 2 score'</span>)</span><br><span class="line"><span class="comment">% Specified in plot order</span></span><br><span class="line">legend(<span class="string">'Admitted'</span>, <span class="string">'Not admitted'</span>)</span><br></pre></td></tr></table></figure></p>
<p><img src="http://7xj2nk.com1.z0.glb.clouddn.com/2015-10-26-29.png" alt=""><br>为X添加X0=1那一列<br><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="matrix">[m, n]</span> = <span class="built_in">size</span>(X);</span><br><span class="line"></span><br><span class="line"><span class="comment">% Add intercept term to x and X_test</span></span><br><span class="line">X = <span class="matrix">[ones(m, <span class="number">1</span>) X]</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">% Initialize fitting parameters</span></span><br><span class="line">initial_theta = <span class="built_in">zeros</span>(n + <span class="number">1</span>, <span class="number">1</span>);</span><br></pre></td></tr></table></figure></p>
<p><code>sigmoid</code>- - sigmoid函数<br><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">g</span> = <span class="title">sigmoid</span><span class="params">(z)</span></span></span><br><span class="line"><span class="comment">%SIGMOID Compute sigmoid functoon</span></span><br><span class="line">g = <span class="built_in">zeros</span>(<span class="built_in">size</span>(z));</span><br><span class="line">g = <span class="number">1</span> ./ (<span class="number">1</span> + <span class="built_in">exp</span>(-z));</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure></p>
<p><code>costfunction</code>- - 按照公式返回 $J(\theta)$ 和各个参数的偏导数<br><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">% Initialize some useful values</span></span><br><span class="line">m = <span class="built_in">length</span>(y); <span class="comment">% number of training examples</span></span><br><span class="line"></span><br><span class="line"><span class="comment">% You need to return the following variables correctly </span></span><br><span class="line">J = <span class="number">0</span>;</span><br><span class="line">grad = <span class="built_in">zeros</span>(<span class="built_in">size</span>(theta));</span><br><span class="line"><span class="keyword">for</span> <span class="built_in">i</span> = <span class="number">1</span>:m</span><br><span class="line">    h = sigmoid(X(<span class="built_in">i</span>, :) * theta);</span><br><span class="line">    J = J + y(<span class="built_in">i</span>) * <span class="built_in">log</span>(h) + (<span class="number">1</span> - y(<span class="built_in">i</span>)) * <span class="built_in">log</span>(<span class="number">1</span> - h);</span><br><span class="line"><span class="keyword">end</span>;</span><br><span class="line">J = (-<span class="number">1</span>/m) * J;</span><br><span class="line">    </span><br><span class="line"><span class="keyword">for</span> <span class="built_in">j</span> = <span class="number">1</span>:<span class="built_in">size</span>(X, <span class="number">2</span>)</span><br><span class="line">    h = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> <span class="built_in">i</span> = <span class="number">1</span>:m</span><br><span class="line">        h = h + (sigmoid(X(<span class="built_in">i</span>, :) * theta) - y(<span class="built_in">i</span>)) * X(<span class="built_in">i</span>, <span class="built_in">j</span>);</span><br><span class="line">    <span class="keyword">end</span>;</span><br><span class="line">    grad(<span class="built_in">j</span>) = h / m;</span><br><span class="line"><span class="keyword">end</span>;</span><br></pre></td></tr></table></figure></p>
<p><code>使用fminunc计算参数值</code><br><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">% Compute and display initial cost and gradient</span></span><br><span class="line"><span class="matrix">[cost, grad]</span> = costFunction(initial_theta, X, y);</span><br><span class="line"><span class="comment">%  Set options for fminunc</span></span><br><span class="line">options = optimset(<span class="string">'GradObj'</span>, <span class="string">'on'</span>, <span class="string">'MaxIter'</span>, <span class="number">400</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">%  Run fminunc to obtain the optimal theta</span></span><br><span class="line"><span class="comment">%  This function will return theta and the cost </span></span><br><span class="line"><span class="matrix">[theta, cost]</span> = ...</span><br><span class="line">    fminunc(@(t)(costFunction(t, X, y)), initial_theta, options);</span><br></pre></td></tr></table></figure></p>
<p><code>plotDecisionBoundary</code>- - 画出分界线<br><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">plotData(X(:,<span class="number">2</span>:<span class="number">3</span>), y);</span><br><span class="line">hold on</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> <span class="built_in">size</span>(X, <span class="number">2</span>) &lt;= <span class="number">3</span></span><br><span class="line">    <span class="comment">% Only need 2 points to define a line, so choose two endpoints</span></span><br><span class="line">    plot_x = <span class="matrix">[min(X(:,<span class="number">2</span>))-<span class="number">2</span>,  max(X(:,<span class="number">2</span>))+<span class="number">2</span>]</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">% Calculate the decision boundary line</span></span><br><span class="line">    plot_y = (-<span class="number">1.</span>/theta(<span class="number">3</span>)).*(theta(<span class="number">2</span>).*plot_x + theta(<span class="number">1</span>));</span><br><span class="line"></span><br><span class="line">    <span class="comment">% Plot, and adjust axes for better viewing</span></span><br><span class="line">    plot(plot_x, plot_y)</span><br><span class="line">    </span><br><span class="line">    <span class="comment">% Legend, specific for the exercise</span></span><br><span class="line">    legend(<span class="string">'Admitted'</span>, <span class="string">'Not admitted'</span>, <span class="string">'Decision Boundary'</span>)</span><br><span class="line">    axis(<span class="matrix">[<span class="number">30</span>, <span class="number">100</span>, <span class="number">30</span>, <span class="number">100</span>]</span>)</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    <span class="comment">% Here is the grid range</span></span><br><span class="line">    u = <span class="built_in">linspace</span>(-<span class="number">1</span>, <span class="number">1.5</span>, <span class="number">50</span>);</span><br><span class="line">    v = <span class="built_in">linspace</span>(-<span class="number">1</span>, <span class="number">1.5</span>, <span class="number">50</span>);</span><br><span class="line"></span><br><span class="line">    z = <span class="built_in">zeros</span>(<span class="built_in">length</span>(u), <span class="built_in">length</span>(v));</span><br><span class="line">    <span class="comment">% Evaluate z = theta*x over the grid</span></span><br><span class="line">    <span class="keyword">for</span> <span class="built_in">i</span> = <span class="number">1</span>:<span class="built_in">length</span>(u)</span><br><span class="line">        <span class="keyword">for</span> <span class="built_in">j</span> = <span class="number">1</span>:<span class="built_in">length</span>(v)</span><br><span class="line">            z(<span class="built_in">i</span>,<span class="built_in">j</span>) = mapFeature(u(<span class="built_in">i</span>), v(<span class="built_in">j</span>))*theta;</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    z = z<span class="operator">'</span>; <span class="comment">% important to transpose z before calling contour</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">% Plot z = 0</span></span><br><span class="line">    <span class="comment">% Notice you need to specify the range [0, 0]</span></span><br><span class="line">    contour(u, v, z, <span class="matrix">[<span class="number">0</span>, <span class="number">0</span>]</span>, <span class="string">'LineWidth'</span>, <span class="number">2</span>)</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line">hold off</span><br></pre></td></tr></table></figure></p>
<p><img src="http://7xj2nk.com1.z0.glb.clouddn.com/2015-10-26-30.png" alt=""><br><code>predict</code>- - 根据所得的模型预测新样本<br><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">m = <span class="built_in">size</span>(X, <span class="number">1</span>); <span class="comment">% Number of training examples</span></span><br><span class="line"></span><br><span class="line"><span class="comment">% You need to return the following variables correctly</span></span><br><span class="line">p = <span class="built_in">zeros</span>(m, <span class="number">1</span>);</span><br><span class="line"><span class="keyword">for</span> <span class="built_in">i</span> = <span class="number">1</span>:m</span><br><span class="line">    <span class="keyword">if</span> sigmoid(X(<span class="built_in">i</span>,:) * theta) &gt;= <span class="number">0.5</span></span><br><span class="line">        p(<span class="built_in">i</span>) = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        p(<span class="built_in">i</span>) = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">end</span>;</span><br><span class="line"><span class="keyword">end</span>;</span><br></pre></td></tr></table></figure></p>
<p>预测准确率<br><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">p = predict(theta, X);</span><br><span class="line"></span><br><span class="line">fprintf(<span class="string">'Train Accuracy: %f\n'</span>, mean(double(p == y)) * <span class="number">100</span>);</span><br></pre></td></tr></table></figure></p>
<h3 id="Regularization-1">Regularization</h3><p>正则化使用的例子是根据一批微晶片两次的测试表现判断它能否通过质量保证（QA）。由于要使用正则化，这次通过<code>mapFeature</code>生成了一个六次的模型。<br><code>plotData</code><br><img src="http://7xj2nk.com1.z0.glb.clouddn.com/2015-10-26-31.png" alt=""><br>通过<code>mapFeature</code>将 $X$ 变为如下形式：<br>$$mapFeature(X) = \begin{bmatrix}<br>1\\<br>x_1\\<br>x_2\\<br>x_1^2\\<br>x_1x_2\\<br>x_2^2\\<br>x_1^3\\<br>\vdots \\<br>x_1x_2^5\\<br>x_2^6<br>\end{bmatrix}$$<br>代码为：<br><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">out</span> = <span class="title">mapFeature</span><span class="params">(X1, X2)</span></span></span><br><span class="line">degree = <span class="number">6</span>;</span><br><span class="line">out = <span class="built_in">ones</span>(<span class="built_in">size</span>(X1(:,<span class="number">1</span>)));</span><br><span class="line"><span class="keyword">for</span> <span class="built_in">i</span> = <span class="number">1</span>:degree</span><br><span class="line">    <span class="keyword">for</span> <span class="built_in">j</span> = <span class="number">0</span>:<span class="built_in">i</span></span><br><span class="line">        out(:, <span class="keyword">end</span>+<span class="number">1</span>) = (X1.^(<span class="built_in">i</span>-<span class="built_in">j</span>)).*(X2.^<span class="built_in">j</span>);</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure></p>
<p><code>costFunctionReg</code>- - 加入了正则化的损失函数<br><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">m = <span class="built_in">length</span>(y); <span class="comment">% number of training examples</span></span><br><span class="line">J = <span class="number">0</span>;</span><br><span class="line">grad = <span class="built_in">zeros</span>(<span class="built_in">size</span>(theta));</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> <span class="built_in">i</span> = <span class="number">1</span>:m</span><br><span class="line">    h = sigmoid(X(<span class="built_in">i</span>, :) * theta);</span><br><span class="line">    J = J + y(<span class="built_in">i</span>) * <span class="built_in">log</span>(h) + (<span class="number">1</span> - y(<span class="built_in">i</span>)) * <span class="built_in">log</span>(<span class="number">1</span> - h);</span><br><span class="line"><span class="keyword">end</span>;</span><br><span class="line">J = (-<span class="number">1</span>/m) * J;</span><br><span class="line">J = J + (theta<span class="operator">'</span> * theta - theta(<span class="number">1</span>)^<span class="number">2</span>) * lambda / (<span class="number">2</span>*m);</span><br><span class="line"></span><br><span class="line"><span class="comment">% 单独更新 theta_0</span></span><br><span class="line">h = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> <span class="built_in">i</span> = <span class="number">1</span>:m</span><br><span class="line">    h = h + (sigmoid(X(<span class="built_in">i</span>, :) * theta) - y(<span class="built_in">i</span>)) * X(<span class="built_in">i</span>, <span class="number">1</span>);</span><br><span class="line"><span class="keyword">end</span>;</span><br><span class="line">grad(<span class="number">1</span>) = h / m;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> <span class="built_in">j</span> = <span class="number">2</span>:<span class="built_in">size</span>(X, <span class="number">2</span>)</span><br><span class="line">    h = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> <span class="built_in">i</span> = <span class="number">1</span>:m</span><br><span class="line">        h = h + (sigmoid(X(<span class="built_in">i</span>, :) * theta) - y(<span class="built_in">i</span>)) * X(<span class="built_in">i</span>, <span class="built_in">j</span>);</span><br><span class="line">    <span class="keyword">end</span>;</span><br><span class="line">    grad(<span class="built_in">j</span>) = h / m + lambda / m * theta(<span class="built_in">j</span>);</span><br><span class="line"><span class="keyword">end</span>;</span><br></pre></td></tr></table></figure></p>
<p>下面是不同 $\lambda$ 下拟合出来的分界线：<br><img src="http://7xj2nk.com1.z0.glb.clouddn.com/2015-10-26-32.png" alt=""><br><img src="http://7xj2nk.com1.z0.glb.clouddn.com/2015-10-26-34.png" alt=""><br><img src="http://7xj2nk.com1.z0.glb.clouddn.com/2015-10-26-33.png" alt=""></p>
<p>可以看到 $\lambda$ 设置的特别大的时候，会出现<code>undefit</code>现象。</p>
<hr>
<p>这周看起来内容似乎比较多，但其实难度并不大，下一周要讲神经网络了，这种名词就是那种只听一下就让人感觉云里雾里的玩意，看来得提前开始学习了-_-||</p>
<p>—EOF—</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>第三周讲了第一个分类算法- -<code>逻辑回归</code>，逻辑回归虽然名字里面包含了回归两个字，但其实它是一个分类算法。参考Wiki上对Logistic Regression的定义：</p>
<blockquote>
<p>In statistics, logistic regression is a regression model where the dependent variable (DV) is categorical. —wiki </p>
</blockquote>
<p>本周课程从最基本的二元分类讲起，引入了<code>sigmoid</code>函数，逻辑回归的<code>cost function</code>和参数学习的方法，然后介绍了将二元分类拓展到多元分类的<code>one-vs-all</code>方法，最后针对模型存在的<code>过拟合(overfitting)</code>问题介绍了<code>正则化(regularization)</code>。<br>]]>
    
    </summary>
    
      <category term="Machine Learning" scheme="http://yoursite.com/tags/Machine-Learning/"/>
    
      <category term="Machine Learning" scheme="http://yoursite.com/categories/Machine-Learning/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Stanford Machine Learning Week2- -Linear Regression with Multiple Variables]]></title>
    <link href="http://yoursite.com/2015/10/17/Stanford%20Machine%20Learning%20Week2-%20-Linear%20Regression%20with%20Multiple%20Variables/"/>
    <id>http://yoursite.com/2015/10/17/Stanford Machine Learning Week2- -Linear Regression with Multiple Variables/</id>
    <published>2015-10-17T15:03:55.000Z</published>
    <updated>2015-10-17T15:53:12.188Z</updated>
    <content type="html"><![CDATA[<p>第二周的课程因为要介绍<code>Octave</code>，所以没讲太多新的知识，只是把第一周线性回归里面的特征由单变量延展到了多变量，新知识点是<code>特征归一化</code>，最后引入了一个<code>正规方程组</code>的方法。</p>
<a id="more"></a>
<h2 id="Multivariate_Linear_Regression">Multivariate Linear Regression</h2><h3 id="Multiple_Features">Multiple Features</h3><p><img src="http://7xj2nk.com1.z0.glb.clouddn.com/2015-10-17-1.png" alt=""><br>还是预测房屋价格的例子，但是特征项不只是房屋面积了，那我们的模型要由原来的 $h_\theta (x) = \theta_0 + \theta_1 x_1$ 变为 $h_\theta (x) = \theta_0 + \theta_1 x_1 + \theta_2 x_2 + \cdots + \theta_n x_n$</p>
<h3 id="Gradient_Descent_for_Multiple_Variables">Gradient Descent for Multiple Variables</h3><p><img src="http://7xj2nk.com1.z0.glb.clouddn.com/2015-10-17-2.png" alt=""><br>梯度下降算法也是一样，只是原来每次迭代只更新 $\theta_0$和 $ \theta_1$两个值，现在每次迭代过程中要更新<code>n+1</code>个值。</p>
<h3 id="Feature_Scaling">Feature Scaling</h3><p>在多变量的线性回归模型中，<code>特征归一化</code>是很重要的一步。由于各个特征值的范围有大有小，如果不采取归一化操作，就会造成在数据上较小的特征对模型的影响较小，而实际上它们和取值范围较大的特征项应该是同等重要的地位。如下图，两个特征项的情况：<br><img src="http://7xj2nk.com1.z0.glb.clouddn.com/2015-10-17-3.png" alt=""><br>可以看到，房屋面积的取值大概在<code>0~2000</code>，而卧室数的取值只有<code>1~5</code>，如果不把它们“缩放”到同一范围内，很显然，模型的参数将主要由房屋面积决定，而且由图可以看出，此时（左图- -未归一化）的迭代次数要明显多于右图。特征归一化，就是把各个特征项的值归一到同一范围。<br><img src="http://7xj2nk.com1.z0.glb.clouddn.com/2015-10-17-4.png" alt=""><br>还有一种归一化操作叫<code>均值归一化</code>。顾名思义，就是将每个特征里的每个值都用该特征的均值做一次标准化。综合以上两种方法，我们在做特征归一化的时候可以采取以下的形式：<br>$$x = \frac{x - \mu}{S}$$<br>其中 $\mu$是该特征项的均值，$S$是一个缩放范围，通常可采取<code>最大值减最小值</code>或者<code>标准差</code>的形式。（怎么好像莫名其妙就要往高斯分布上靠了。。）</p>
<h3 id="Learning_Rate">Learning Rate</h3><p>在我们采取梯度下降算法去拟合出最佳回归线的过程中，学习率$\alpha$是我们自己选取的一个值，那我们如何保证程序在正确的运行呢？<br>一个显而易见的办法是，将$J(\theta)$与迭代次数的关系用坐标图表示出来，如果随着迭代次数的增加，$J(\theta)$在不断下降最后趋于平稳，那我们的选取的$\alpha$ 应该就是合适的，如下图。<br><img src="http://7xj2nk.com1.z0.glb.clouddn.com/2015-10-17-5.png" alt=""><br>但如果我们得到的图像是下面这样的，那么一个很大的可能就是我们选择的$\alpha$太大了，需要改小一点。<br><img src="http://7xj2nk.com1.z0.glb.clouddn.com/2015-10-17-6.png" alt=""></p>
<blockquote>
<p>理论上可以证明，对于一个充分小的学习率$\alpha$，$J(\theta)$ 的值在每次迭代的过程中都是减小的。</p>
</blockquote>
<p>但是考虑到迭代次数的关系，我们也不能把$\alpha$ 设置得太小，否则每次都是在走“baby step”（上图右边蓝线所示）。那么我们应该如何去选取$\alpha$ 的值呢？<br><img src="http://7xj2nk.com1.z0.glb.clouddn.com/2015-10-17-7.png" alt=""><br>我们可以根据$J(\theta)$ 和迭代次数的图像慢慢地调整$\alpha$ 的大小，每次调整的幅度大概在<code>log</code>级别，如上图所示。</p>
<h3 id="Features_and_Polynomial_Regression">Features and Polynomial Regression</h3><p><img src="http://7xj2nk.com1.z0.glb.clouddn.com/2015-10-17-8.png" alt=""><br>如果在我们的模型中有两个特征项分别是长和宽，与其把它们当作两个特征项，也许采取它们的乘积- -面积作为一个新的特征项才更合适。所以我们建模使用的特征项不一定是数据集给的特征项。<br><img src="http://7xj2nk.com1.z0.glb.clouddn.com/2015-10-17-9.png" alt=""><br>如果我们得到数据集是上图这样的形式，如果只选取<code>size</code>一个特征项，那么拟合出来的将是一条直线，而显然从图形直观上可以看出直线不太合适。那我们可以再增加一个<code>size^2</code>的特征项，虽然前半部分可以拟合，但考虑到二次函数（图中蓝线）过了顶点之后是要下降的，所以二次函数也不太合适。再增加一个<code>size^3</code>，此时好像比较合理了。那么这时候，<strong>特征归一化就显得尤为重要了</strong>。但三次项也不是最好的选择，最好的应该是<code>sqrt(size)</code>，见下图。<br><img src="http://7xj2nk.com1.z0.glb.clouddn.com/2015-10-17-10.png" alt=""></p>
<h2 id="Computing_Parameters_Analytically">Computing Parameters Analytically</h2><h3 id="Normal_Equation">Normal Equation</h3><p>要得到<br>$$\begin{equation*}<br>   \theta = \mathop{argmin}_{\theta} {J(\theta)}<br> \end{equation*}$$<br> 不只有梯度下降一种方法，还有一种比较常用的方法是<code>正规方程组</code>。<br> <img src="http://7xj2nk.com1.z0.glb.clouddn.com/2015-10-17-12.png" alt=""><br> $J(\theta)$是一个二次函数，先看$\theta$是一维的情况，此时$\theta$是一个实数，对于这样一个二次函数去找最小值，我们只需要求导，然后令导数等于0，就能得到最小值点。即只要从下面的式子中解出$\theta$：<br> $$\frac{\mathrm{d}}{\mathrm{d} \theta} J(\theta) = 0$$<br> 那么扩展到多维，我们也只需要求出各个的偏导数，然后令它们都等于0，从这些方程组中解出每个$\theta_j$的值：<br> $$\frac{\partial}{\partial \theta_j} J(\theta) = 0$$<br> <img src="http://7xj2nk.com1.z0.glb.clouddn.com/2015-10-17-14.png" alt=""><br> 如果采取矩阵运算的话，公式是（推导方法见<a href="#_1">附录</a>）<br> $$\theta = (X^T X)^{-1}X^T y$$<br> 在<code>Octave</code>里面也是一行代码：<br><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">theta = pinv(X<span class="operator">'</span> * X) * X<span class="operator">'</span> * y;</span><br></pre></td></tr></table></figure></p>
<p>如果采用正规方程组的方法，那么特征归一化就没有必要做了。那么什么时候采用梯度下降算法，什么时候选用正规方程组方法呢？<br><img src="http://7xj2nk.com1.z0.glb.clouddn.com/2015-10-17-15.png" alt=""><br>从上图可以看到：</p>
<table>
<thead>
<tr>
<th><code>梯度下降算法</code></th>
<th><code>正规方程组</code></th>
</tr>
</thead>
<tbody>
<tr>
<td>需要手动选择学习率 $\alpha$</td>
<td></td>
</tr>
<tr>
<td>需要很多次迭代</td>
<td>不需要迭代</td>
</tr>
<tr>
<td></td>
<td>需要计算$(X^T X)^{-1}$</td>
</tr>
<tr>
<td>特征项很多时依然可行</td>
<td>特征项很多时速度太慢</td>
</tr>
</tbody>
</table>
<p>比如说<code>n=1e6</code>时，梯度下降仍然是一个不错的算法，而此时正规方程组由于要计算$(X^T X)^{-1}$，运行比较缓慢。那么什么情况下，特征数会有<code>10^6</code>个呢？这门课的TA举了一个例子：</p>
<blockquote>
<p>A color image of size 1000x1000 pixels will have 3,000,000 features (1000x1000x3).</p>
</blockquote>
<p>再举一个例子：</p>
<blockquote>
<p>tri-grams from language models (common in NLP) typically go into the millions (more if you take 4-grams or 5-grams)</p>
</blockquote>
<h2 id="附录">附录</h2><p>如何得到- - - - ？<br> $$\theta = (X^T X)^{-1}X^T y$$<br>首先我们将 $h_\theta (x)$ 和 $J(\theta)$ 都写成向量形式：<br>$$h_\theta (x) = \theta^T x$$<br>$$J(\theta) = \frac{1}{2m}(X\theta - y)^T(X\theta - y)$$<br>因为我们要求的是<code>导数</code>等于0的点，所有前面的系数$\frac{1}{2m}$可以直接舍去，并将$J(\theta)$展开：<br>$$J(\theta) = (X \theta) ^T X \theta - (X \theta)^T y - y^T (X \theta) + y^T y$$<br>注意到，$X\theta$ 和 $y$ 都是列向量，$(X\theta)^T$ 和 $y^T$ 都是行向量，那么 $(X \theta)^T y$ 和 $y^T (X \theta)$ 都是对应的两个数相乘相加得到的一个<strong>实数</strong>，它们的值是一样的，所以 $J(\theta)$ 可以化简为：<br>$$J(\theta) = \theta^T X^T X \theta  - 2(X\theta)^T y + y^T y$$<br>对 $\theta$ 求导，这里的 $\theta$ 是一个向量，$\theta^T \cdots \theta$ 就相当于一维（实数）里面的平方项，求导为$2\cdots\theta$：<br>$$\frac{\partial J}{\partial \theta} = 2X^T X \theta - 2X^T y$$<br>令导数等于0，得：<br>$$X^T X \theta = X^T y$$<br>这里我们假定矩阵 $X^T X$ 是可逆的，得到最终结果：<br>$$\theta = (X^T X)^{-1}X^T y$$</p>
<hr>
<p>这一周都在开发安卓了，马上要验收项目了，赶得比较紧一点，幸好第二周的课也比较少，等下周把安卓的文档写了，就可以专心投入到这方面的学习了-_-||</p>
<p>—EOF—</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>第二周的课程因为要介绍<code>Octave</code>，所以没讲太多新的知识，只是把第一周线性回归里面的特征由单变量延展到了多变量，新知识点是<code>特征归一化</code>，最后引入了一个<code>正规方程组</code>的方法。</p>]]>
    
    </summary>
    
      <category term="Machine Learning" scheme="http://yoursite.com/tags/Machine-Learning/"/>
    
      <category term="Machine Learning" scheme="http://yoursite.com/categories/Machine-Learning/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Stanford Machine Learning Week1- -Linear Regression with One Variable]]></title>
    <link href="http://yoursite.com/2015/10/10/Stanford%20Machine%20Learning%20Week1-%20-Linear%20Regression%20with%20One%20Variable/"/>
    <id>http://yoursite.com/2015/10/10/Stanford Machine Learning Week1- -Linear Regression with One Variable/</id>
    <published>2015-10-10T14:18:16.000Z</published>
    <updated>2015-10-10T20:03:51.194Z</updated>
    <content type="html"><![CDATA[<p>这周开始在<code>coursera</code>上学习<code>Andrew Ng</code>的<code>Machine Learning</code>课程了，就顺便做份笔记吧。<br>Ng教授就不用多介绍了，美籍华人，中文名叫吴恩达，coursera的联合创始人之一，原来是谷歌大脑的负责人，现在被百度请来当首席科学家，负责百度大脑项目。他的这门机器学习课程也算是coursera上最经典的课程了，地址在此： <a href="https://www.coursera.org/learn/machine-learning" target="_blank" rel="external">https://www.coursera.org/learn/machine-learning</a></p>
<a id="more"></a>
<p>第一周也没讲什么深入的东西，先介绍了一下机器学习的概念、分类、应用等，接着讲了<code>单变量的线性回归</code>，然后讲了最优化里面的<code>梯度下降算法</code>，把二者结合起来就是一个简单的机器学习方法了。</p>
<h2 id="Environment_Setup_Instructions">Environment Setup Instructions</h2><h3 id="Welcome_to_machine_learning">Welcome to machine learning</h3><blockquote>
<p>Machine learning is the science of getting computers to learn, without being explicitly programmed.                 — Arthur Samuel</p>
<p>A computer program is said to learn from experience E with respect to some class of tasks T and performance measure P, if its performance at tasks in T, as measured by P, improves with experience E. —Tom Mitchell</p>
<p>Example: playing checkers.</p>
<ul>
<li>E = the experience of playing many games of checkers</li>
<li>T = the task of playing checkers.</li>
<li>P = the probability that the program will win the next game.</li>
</ul>
</blockquote>
<p>机器学习的两个比较正式的定义，上面的那个较老一点，下面这个似乎不是很好理解，我也举个例子吧：比如给了过去50年某地区的天气资料，然后去预测未来的天气。这里 E：过去的天气资料 T：预测天气的任务 P：预测的准确率。</p>
<h3 id="Install_Octave/MATLAB">Install Octave/MATLAB</h3><p>这门课有编程的作业，而且光听不实际操作一下也不容易理解。如果不是为了交作业的话，<code>Python</code> <code>Java</code> <code>R</code> … 等语言都可以，不过这门课只接受<code>MATLAB</code>的代码，而且就我个人的<code>Python</code>和<code>Java</code>体验来讲，在数据处理这方面，<code>MATLAB</code>还是最方便的，<code>R</code>没有体验过，据说也很不错。这里给一个<code>Matlab 2015a</code>的破解版地址：<a href="http://pan.baidu.com/s/1eQCYQ1k" target="_blank" rel="external">点此下载</a></p>
<h2 id="Introduction">Introduction</h2><p><img src="http://7xj2nk.com1.z0.glb.clouddn.com/2015-10-10-1_1.png" alt="Machine Learning"></p>
<p>举例里面注意第二点：人工编程不容易实现的应用。比如：无人驾驶、手写识别、自然语言处理、可视化等等。</p>
<h3 id="supervised_learning">supervised learning</h3><p>监督学习可以分为<strong>回归问题</strong>和<strong>分类问题</strong>。在回归问题（regression）中，因变量的值是连续的，也就是说我们要找到一个函数把自变量（特征）映射到一系列连续的值，比如给定房屋面积，预测房屋价格。在分类问题（classification）中，因变量的值是离散的，比如知道了肿瘤的大小，判断这个肿瘤是良性还是恶性的（0或1），这是一个二元分类，当然还可以有多元的分类。</p>
<p><img src="http://7xj2nk.com1.z0.glb.clouddn.com/2015-10-10-1_2.png" alt=""></p>
<p>根据房屋面积预测房屋价格的例子，需要一批已经提前标注好的数据集，这里是单变量的，画到图上就是上图中的<code>X</code>，对其运用线性回归的话，可能就是图中粉色直线，但其实这条线拟合的并不好，图中的蓝线其实更符合房屋面积和价格之间的关系。粉线可能就是$y = \theta_0 + \theta_1 x$，蓝线可能是$y = \theta_0 + \theta_1 x + \theta_2 \sqrt x$，但如果把$\sqrt x$也当作一个新变量的话，蓝线也就变成$y = \theta_0 + \theta_1 x_1 + \theta_2 x_2$，也就是一个多变量的线性回归了，所以<strong>如何选择特征</strong>也是有一定技巧的，实际上这里有一个算法，后面的课程里面会讲。</p>
<p><img src="http://7xj2nk.com1.z0.glb.clouddn.com/2015-10-10-1_3.png" alt=""></p>
<p>上面是一个回归的例子，这是一个分类的例子，还是单变量，知道肿瘤大小，判断这个肿瘤是良性还是恶性的。这里的因变量就是离散的一些值（这里是0、1），但也可以有更多，比如0、1、2、3，0 代表良性，1 代表类型 1 的肿瘤，2 代表类型 2 的肿瘤…</p>
<p><img src="http://7xj2nk.com1.z0.glb.clouddn.com/2015-10-10-1_4.png" alt=""></p>
<p>这是一个多变量（两特征）的分类，知道肿瘤大小和病人的年龄去判断肿瘤的性质— —蓝色圈表示良性，红色叉表示恶性，去拟合一条最优分隔线。</p>
<h3 id="unsupervised_learning">unsupervised learning</h3><p>无监督学习是一种<strong>不需要已标注数据集</strong>的一种学习方式。比如常提到的<strong>聚类</strong>（clustering），就是利用数据之间的联系（比如距离）自动将数据分为几类。当然不只有聚类，还有<strong>联想式记忆</strong>（associative memory）等技术。</p>
<p><img src="http://7xj2nk.com1.z0.glb.clouddn.com/2015-10-10-1_5.png" alt=""></p>
<p>这是一个无监督学习的例子，浏览网页的时候，会把内容相关的自动归到一类中，聚类的一个应用。</p>
<p><img src="http://7xj2nk.com1.z0.glb.clouddn.com/2015-10-10-1_6.png" alt=""></p>
<p>这也是Ng课上提出来的例子，一个鸡尾酒会，两个麦克风，两个发言人，<code>#1</code> 离1号麦克风近一点，<code>#2</code>离2号麦克风近一点，但是都能录到他们的声音，现在如何从这些混合的音频中，将他们两个的发言区分开来…也是无监督学习的一个例子，Ng也给出了在<code>MATLAB</code>上的实现，只有<strong>一行</strong>代码：<br><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="matrix">[W,s,v]</span> = svd((<span class="built_in">repmat</span>(sum(x.*x,<span class="number">1</span>),<span class="built_in">size</span>(x,<span class="number">1</span>),<span class="number">1</span>).*x)*x<span class="operator">'</span>);</span><br></pre></td></tr></table></figure></p>
<h2 id="Model_and_Cost_Function">Model and Cost Function</h2><h3 id="model_representation">model representation</h3><p><img src="http://7xj2nk.com1.z0.glb.clouddn.com/2015-10-10-1_9.png" alt=""></p>
<p>给了一个训练集，我们要通过一个学习算法建立一个模型，这里用的是<code>hypothesis</code>这个单词，也是一个命名的历史遗留问题。通过这个模型，再有新的数据时，可以得到对这个数据的预估值，见上图左面的流程图。那我们如何表示这个模型呢，这里就可以用$h_\theta(x) = \theta_0 + \theta_1x$ 来表示这个模型（单变量），那如何衡量这个模型的好坏呢，就要用到下面的<code>cost function</code>了。</p>
<h3 id="cost_function">cost function</h3><p><img src="http://7xj2nk.com1.z0.glb.clouddn.com/2015-10-10-1_10.png" alt=""></p>
<p>对于我们训练出来的模型，它做出来的预测肯定要与实际正确的值足够接近，那我们可以定义我们的费用函数$J(\theta)$为如下形式：<br>$$J(\theta) = \frac{1}{2m}\cdot \sum_{i=1}^{m} (h_{\theta}(x^{(i)}) - y^{(i)})^2$$</p>
<p>为什么要把<code>cost function</code>定义为<strong>平方项</strong>呢，原因有以下几点：</p>
<blockquote>
<ol>
<li>正负项同样得到惩罚，无论预测值是偏小还是偏大。</li>
<li>大偏差比小偏差得到更大的惩罚（<del>为什么不用绝对值函数？</del>）</li>
<li>二次函数的图像更平滑，且一次求导后变为线性，易于处理</li>
<li>二次函数的凸性保证了函数的收敛，也就是保证有全局最小值</li>
<li>平方项之和还有一些很有用的性质，比如旋转不变性（rotational invariance）（<del>为什么不用4次项</del>）</li>
</ol>
</blockquote>
<p>至于前面的系数$\frac{1}{2m}$只是为了后续数学上处理的方便而加上的。</p>
<p><img src="http://7xj2nk.com1.z0.glb.clouddn.com/2015-10-10-1_11.png" alt=""></p>
<p>直观地看一下$J(\theta)$的图像更有益于我们的理解，这里是固定$\theta_0 = 0$，看一下$J(\theta_1)$与$\theta_1$之间的关系，也就是上图中右边的二次函数，那如果是两个参数$\theta_0$ 和 $\theta_1$，$J(\theta)$与它们的关系就是下图了：</p>
<p><img src="http://7xj2nk.com1.z0.glb.clouddn.com/2015-10-10-1_12.png" alt=""> </p>
<p>这样的图通常叫做<code>bowl shape</code>，可以很明显的看出来它只有<strong>一个</strong>局部最小点，那就是全局最小点。这点性质很重要，因为下面要讲的梯度下降算法，在目标函数有多个局部最小点时，会陷入局部最优而不是全局最优。</p>
<h2 id="Parameter_Learning">Parameter Learning</h2><h3 id="Gradient_Descent">Gradient Descent</h3><p><strong>一个函数沿其梯度方向上升最快，沿其负梯度方向下降最快。</strong>这就是梯度下降算法求目标函数最值的原理。<br>用梯度下降算法求最小值的步骤大概如下（更多内容请参阅高等数学中的《最优化原理与方法》）：</p>
<blockquote>
<ol>
<li>选取一个初始点</li>
<li>计算在该点的梯度，沿负梯度方向“走一小步”，到达一个新点</li>
<li>重复第二步，直到收敛（该点的梯度为0，到达了一个局部最小值）</li>
</ol>
</blockquote>
<p>具体过程如下图所示：</p>
<p><img src="http://7xj2nk.com1.z0.glb.clouddn.com/2015-10-10-1_13.png" alt=""></p>
<p>这里成功地找到了全局最小值，但是如果初始点选择的不好，则不一定能找到全局最小值，见下图：</p>
<p><img src="http://7xj2nk.com1.z0.glb.clouddn.com/2015-10-10-1_14.png" alt=""></p>
<p>选取右边的初始点，则陷入了局部最小值，因为这里梯度等于 0，梯度下降算法结束，可见对于不同的目标函数和初始点，梯度下降算法不能保证一定找到全局最小值。但是在我们选取的<code>cost function</code>中，目标函数是二次函数，只有一个局部最小值，亦即全局最小值，所以是可行的。</p>
<p>下面是将梯度下降算法应用到线性回归中$J(\theta)$的最小化过程中时，参数$\theta$的更新过程：</p>
<p><img src="http://7xj2nk.com1.z0.glb.clouddn.com/2015-10-10-1_15.png" alt=""></p>
<p>因为$J(\theta)$是多元函数，所以用偏微分代替导数，梯度前面的 $\alpha$叫做<code>学习率</code>，最优化里面叫做<code>步长因子</code>，它决定了每次沿负梯度方向走的那一小步的距离。注意，在编码时候，各个参数是<strong>同时更新</strong>的，见上图。</p>
<p><img src="http://7xj2nk.com1.z0.glb.clouddn.com/2015-10-10-1_16.png" alt=""></p>
<p>对于$\alpha$的选择也很有考究，如果太小，则需要很多的迭代次数才能达到最小值，也就是很慢；但如果选得太大，则很可能不能找到最小值，见上图右侧Ng的图示。</p>
<p><img src="http://7xj2nk.com1.z0.glb.clouddn.com/2015-10-10-1_17.png" alt=""></p>
<p>即使我们始终保持学习率$\alpha$为一个定值，它每次搜索的步长也是逐渐减小的，所以我们没有必要动态更新$\alpha$的值。但我记得最优化里面的步长因子也是通过每次到达一个新点之后做<strong>直线搜索</strong>动态求解的。</p>
<p><img src="http://7xj2nk.com1.z0.glb.clouddn.com/2015-10-10-1_18.png" alt=""></p>
<p>上图是将梯度下降算法应用到线性回归中$J(\theta)$求解的一个过程，右边的<code>contour</code>图可以很明显地看出随着迭代次数的增加迭代点的变化，$J(\theta)$最终也达到了最小值。</p>
<p><img src="http://7xj2nk.com1.z0.glb.clouddn.com/2015-10-10-1_19.png" alt=""></p>
<p>这种每到了一个新的迭代点，都用全部数据集（因为$J(\theta)$每次都是在全部数据集上求和得到的）求梯度的方法叫做<strong>批次(batch)梯度下降算法</strong>，事实上，我们每次在一个新的迭代点只选用一组数据也可以得到最优解，这样的方法叫做<strong>随机梯度下降算法</strong>，只是相较于<code>batch gradient descent</code>迭代次数更多，得到最优解的速度更慢一点，而且在每次的迭代过程中，批次梯度下降可以保证$J(\theta)$是一直在下降的，而随机梯度下降中由于每次只选取一组数据，所以在某些迭代步骤中有可能是令$J(\theta)$上升的。</p>
<h2 id="Assignment">Assignment</h2><p>这次的作业也挺简单的，假如你是一个房地产开发商，给一组城市人口与利润的数据集，做一次单变量的线性回归。<br>数据集大概是这个样子的：</p>
<p><img src="http://7xj2nk.com1.z0.glb.clouddn.com/2015-10-10-1-20.png" alt=""></p>
<p><code>computeCost.m</code>用来计算$J(\theta)$的值：—&gt;（这里使用了矩阵运算，自己模拟一下就懂了）<br><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">J = (X * theta - y)<span class="operator">'</span> * (X *theta - y) / (<span class="number">2</span>*m);</span><br></pre></td></tr></table></figure></p>
<p><code>gradientDescent.m</code>用来实现梯度下降：<br><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> iter = <span class="number">1</span>:num_iters</span><br><span class="line">    <span class="comment">% theta = theta - alpha * X' * (X * theta - y);</span></span><br><span class="line">    temp = <span class="built_in">zeros</span>(<span class="number">1</span>, <span class="built_in">size</span>(theta, <span class="number">1</span>));</span><br><span class="line">    <span class="keyword">for</span> <span class="built_in">i</span> = <span class="number">1</span>:m</span><br><span class="line">        <span class="keyword">for</span> <span class="built_in">j</span> = <span class="number">1</span>:<span class="built_in">length</span>(theta)</span><br><span class="line">        temp(<span class="built_in">j</span>) = temp(<span class="built_in">j</span>) + (X(<span class="built_in">i</span>, :) * theta - y(<span class="built_in">i</span>)) * X(<span class="built_in">i</span>, <span class="built_in">j</span>);</span><br><span class="line">    <span class="keyword">end</span>;</span><br><span class="line">    temp = temp / m;</span><br><span class="line">    theta = theta - alpha * temp<span class="operator">'</span>;</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure></p>
<p>加<code>%</code>那一行本来是想用矩阵运算代替<code>for</code>循环的，结果出错了-_-||</p>
<p>用<code>surf</code>函数画一下$J(\theta)$的图形大概是这样的：<br><img src="http://7xj2nk.com1.z0.glb.clouddn.com/2015-10-10-1-21.png" alt=""></p>
<p>用<code>contour</code>函数画一下$J(\theta)$的等值线大概是这样的，中间的红叉是最终点：<br><img src="http://7xj2nk.com1.z0.glb.clouddn.com/2015-10-10-1-22.png" alt=""></p>
<p>最终拟合出来的直线如图：<br><img src="http://7xj2nk.com1.z0.glb.clouddn.com/2015-10-10-1-23.png" alt=""></p>
<hr>
<p>第一周的课，总体上感觉还是比较轻松的，而且相较于Ng 08年开的那门机器学习，感觉要浅显一些了，起码没有那么多公式推导，听起来要轻松不少。</p>
<p>最近其实挺忙的，实验室的安卓项目催挺紧的，还是挤出了一点时间来跟进学习，希望能够坚持下去吧，要知道整个本科阶段上的课也没这么认真过啊-_-||，又是听课又是做作业又是写笔记的。。</p>
<p>—EOF—</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>这周开始在<code>coursera</code>上学习<code>Andrew Ng</code>的<code>Machine Learning</code>课程了，就顺便做份笔记吧。<br>Ng教授就不用多介绍了，美籍华人，中文名叫吴恩达，coursera的联合创始人之一，原来是谷歌大脑的负责人，现在被百度请来当首席科学家，负责百度大脑项目。他的这门机器学习课程也算是coursera上最经典的课程了，地址在此： <a href="https://www.coursera.org/learn/machine-learning">https://www.coursera.org/learn/machine-learning</a></p>]]>
    
    </summary>
    
      <category term="Machine Learning" scheme="http://yoursite.com/tags/Machine-Learning/"/>
    
      <category term="Machine Learning" scheme="http://yoursite.com/categories/Machine-Learning/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Python3爬虫模拟登录抓取OJ代码]]></title>
    <link href="http://yoursite.com/2015/06/10/Python3_spider_to_csuOJ/"/>
    <id>http://yoursite.com/2015/06/10/Python3_spider_to_csuOJ/</id>
    <published>2015-06-10T13:06:53.000Z</published>
    <updated>2015-09-27T16:52:35.676Z</updated>
    <content type="html"><![CDATA[<p>最近在看<a href="http://www.nltk.org/book/" target="_blank" rel="external"><code>《Natural Language Processing with Python》</code></a>,看到第三章讲用Python从网上爬数据时候，突然就想做个爬虫玩玩了。当然，最先想到的是拿教务管理系统开刀，但是没什么实际意义。玩着游戏时候，又想到在OJ上提交过的代码，有上百个文件，一直很想整理一下，但是一个一个文件去打开网页复制代码，保存到本地，这种事情想想就很蛋疼，还是交给计算机做比较合理。</p>
<a id="more"></a>
<h2 id="模拟登录">模拟登录</h2><p>说干就干，打开中南OJ的首页：<a href="http://acm.csu.edu.cn/OnlineJudge/" target="_blank" rel="external">http://acm.csu.edu.cn/OnlineJudge/</a><br><img src="http://7xj2nk.com1.z0.glb.clouddn.com/2015-06-10-image1.png" alt="CSU Online Judge"></p>
<p>要是想得到自己提交过的代码的话，首先第一步就是要登录自己的账号了，所以我们需要做一个python的模拟登录的模块。<br>先看一下，我们正常登录账号的过程，点击右上角的<code>Login</code>，然后进入到这个页面：<a href="http://acm.csu.edu.cn/OnlineJudge/loginpage.php" target="_blank" rel="external">http://acm.csu.edu.cn/OnlineJudge/loginpage.php</a><br><img src="http://7xj2nk.com1.z0.glb.clouddn.com/2015-06-10-image2.png" alt="Login"></p>
<p>输入账号、密码后点击<code>Submit</code>，验证通过就登录成功了。<br>那我们如何知道浏览器向哪里发送了哪些信息呢？</p>
<blockquote>
<p>发送的地址是：<code>http://acm.csu.edu.cn/OnlineJudge/loginpage.php</code>吗？<br>发送的信息只有：<code>User ID</code>，<code>Password</code>吗？</p>
</blockquote>
<p>为了看到浏览器后台的一些行为，我们需要一款分析工具，由于对<code>chrome</code>的自带的分析工具不太熟悉，我这里用了一款名叫<code>Fiddler</code>的工具。<br>打开这个工具，然后在浏览器地址栏输入<a href="http://acm.csu.edu.cn/OnlineJudge/" target="_blank" rel="external">http://acm.csu.edu.cn/OnlineJudge/</a>，可以在<em>Fiddler</em>得到如下的一条200的数据，如图：<br><img src="http://7xj2nk.com1.z0.glb.clouddn.com/2015-06-10-image3.png" alt=""></p>
<p>点击右边的<code>[raw]</code>，可以看到一些浏览器发送的<code>Headers</code>信息，这些信息等下会用到。<br><img src="http://7xj2nk.com1.z0.glb.clouddn.com/2015-06-10-image4.png" alt=""></p>
<p>这时候我们去到登录界面<a href="http://acm.csu.edu.cn/OnlineJudge/loginpage.php" target="_blank" rel="external">http://acm.csu.edu.cn/OnlineJudge/loginpage.php</a>，输入账号密码，点击<code>Submit</code>登录后，可以在<em>Fiddler</em>里找到一条<code>post</code>请求（最左边的小图标带有一个绿色小箭头），如下图：<br><img src="http://7xj2nk.com1.z0.glb.clouddn.com/2015-06-10-image5.png" alt=""></p>
<p>可以看到我们是给<code>http://acm.csu.edu.cn/OnlineJudge/login.php</code>这个地址发送了数据，而不是我们以为的<code>http://acm.csu.edu.cn/OnlineJudge/loginpage.php</code>，那么发送了哪些数据呢？点击右边的<code>WebForms</code>，就可以看到刚才浏览器提交的表单数据了，如图：<br><img src="http://7xj2nk.com1.z0.glb.clouddn.com/2015-06-10-image6.png" alt=""></p>
<p>包括我们填写的账号，密码，还有一个<code>submit</code>项，值是<code>Submit</code>，我估计这个值是写死的<code>Submit</code>，而不是从页面上随机生成的，所以这个值我在后面的编程过程中没有处理，而结果也显示是正确的，事实上，后面爬下来页面就知道，这是个<code>submit</code> <code>type</code>，而且它的<code>value</code>默认写的就是<code>Submit</code>。<br>好了，有了这些东西，我们就可以把模拟登录的代码写出来了：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 模拟登录</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">login</span><span class="params">()</span>:</span></span><br><span class="line">    cj = http.cookiejar.CookieJar()</span><br><span class="line">    pro = urllib.request.HTTPCookieProcessor(cj)</span><br><span class="line">    opener = urllib.request.build_opener(pro)</span><br><span class="line">    header = &#123;</span><br><span class="line">    <span class="string">'Connection'</span>: <span class="string">'Keep-Alive'</span>,</span><br><span class="line">    <span class="string">'Accept'</span>: <span class="string">'text/html, application/xhtml+xml, */*'</span>,</span><br><span class="line">    <span class="string">'Accept-Language'</span>: <span class="string">'zh-Hans-CN,zh-Hans;q=0.7,ja;q=0.3'</span>,</span><br><span class="line">    <span class="string">'User-Agent'</span>: <span class="string">'Mozilla/5.0 (Windows NT 6.3; WOW64; Trident/7.0; LCJB; rv:11.0) like Gecko'</span>,</span><br><span class="line">    <span class="string">'Host'</span>: <span class="string">'acm.csu.edu.cn'</span>,</span><br><span class="line">    <span class="string">'Accept-Encoding'</span>: <span class="string">'gzip, deflate'</span>,</span><br><span class="line">    <span class="string">'DNT'</span>: <span class="string">'1'</span></span><br><span class="line">    &#125;</span><br><span class="line">    headers = []</span><br><span class="line">    <span class="keyword">for</span> key, value <span class="keyword">in</span> header.items():</span><br><span class="line">        elem = (key, value)</span><br><span class="line">        headers.append(elem)</span><br><span class="line">    opener.addheaders = headers</span><br><span class="line">    url = <span class="string">'http://acm.csu.edu.cn/OnlineJudge/login.php'</span></span><br><span class="line">    myid = <span class="string">'这里填自己的账号'</span></span><br><span class="line">    password = <span class="string">'这里是密码'</span></span><br><span class="line">    postDict = &#123;</span><br><span class="line">        <span class="string">'user_id'</span>: myid,</span><br><span class="line">        <span class="string">'password'</span>: password,</span><br><span class="line">        <span class="string">'submit'</span>: <span class="string">'Submit'</span></span><br><span class="line">    &#125;</span><br><span class="line">    postData = urllib.parse.urlencode(postDict).encode()</span><br><span class="line">    opener.open(url, postData)</span><br><span class="line">    <span class="keyword">return</span> opener</span><br></pre></td></tr></table></figure></p>
<ul>
<li>这里因为我是用<em>Python3</em>做的，所以用的是<code>urllib.request</code>，就相当于2里面的<code>urllib2</code>，因为在3里面<code>urllib2</code>被拆分成了<code>urllib.request</code>+<code>urllib.error</code>。</li>
<li>然后用<code>http.cookiejar</code>来处理浏览器缓存。</li>
<li>这里的<code>headers</code>就是上面在<em>Fiddler</em>里面看到的那些，加上这些<code>headers</code>的作用是，让接收数据请求的后台以为这是一个普通用户通过浏览器界面的正常访问，而不是爬虫之类的恶意请求，简单地说，就是伪装。</li>
<li>加<code>headers</code>的方法在3里面是：<code>opener.addheaders = headers</code>，注意这不是一个方法，而是一个属性，第一次就按2里面的写成<code>opener.add_headers(header)</code>就报错了。</li>
<li><code>url</code>就是我们在<em>Fiddler</em>里面看到的那个地址。</li>
<li><code>postData</code>要用<code>urllib.parse</code>编码成<code>url</code>格式。</li>
<li>最后返回一个<code>opener</code>，再用这个<code>opener</code>去打开其他界面，里面都是有我们的登录信息的。</li>
</ul>
<h2 id="抓取处理数据">抓取处理数据</h2><p>登录之后，我们的AC代码都是在这个界面显示的：<code>http://acm.csu.edu.cn/OnlineJudge/status.php?user_id=你的ID&amp;jresult=4</code> 如下图：<br><img src="http://7xj2nk.com1.z0.glb.clouddn.com/2015-06-10-image7.png" alt=""></p>
<p>然后我们点击<code>Language</code>栏下面的<code>C++</code>就能到代码界面了，如图：（这是本屌原来写的一个<em>BFS</em>，画美不看-_-||）<br><img src="http://7xj2nk.com1.z0.glb.clouddn.com/2015-06-10-image8.png" alt=""></p>
<p>我们来看一下这个页面的地址：<code>http://acm.csu.edu.cn/OnlineJudge/showsource.php?id=93605</code>， 可以发现只要我们把所有的<code>id</code>拿到了，然后<code>url = http://acm.csu.edu.cn/OnlineJudge/showsource.php?id= + id</code>然后一个一个去<code>opener.open(url)</code>就可以了。</p>
<p>这个<code>id</code>就是上一个界面中的<code>RunID</code>，我们只需要把上一个界面中的<code>RunID</code>全部拿到，写到一个<code>list</code>里面即可。</p>
<p>那如何拿到上一个界面中的<code>RunID</code>呢，我把这个界面爬下来分析一下：<br><img src="http://7xj2nk.com1.z0.glb.clouddn.com/2015-06-10-image9.png" alt=""></p>
<p>可以看到，每个<code>&lt;tr&gt;</code>有9个<code>&lt;td&gt;</code>，分别对应页面上的9列，我们需要的信息就在这些<code>&lt;td&gt;</code>里面，那么如何得到这些信息呢？<br>这里用到一个非常好用的第三方库，<code>BeautifulSoup</code>，它可以很方便的分析原始<code>html</code>代码，并通过一些命令得到你想要的值。例如，这里我们用<code>soup.find_all(&#39;td&#39;)</code>得到界面上所有的<code>&lt;td&gt;</code>标签（这里比较巧，所有的<code>&lt;td&gt;</code>标签都是这些数据，没有多余的其他地方的标签），然后9个为一组去处理得到我们想要的信息。具体代码如下：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 文件扩展名</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getext</span><span class="params">(ext)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> ext == <span class="string">'C'</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">'.c'</span></span><br><span class="line">    <span class="keyword">elif</span> ext == <span class="string">'C++'</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">'.cpp'</span></span><br><span class="line">    <span class="keyword">elif</span> ext == <span class="string">'Java'</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">'.java'</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">'.txt'</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">pssoup</span><span class="params">(soup)</span>:</span></span><br><span class="line">    items = []</span><br><span class="line">    tdlist = soup.find_all(<span class="string">'td'</span>)</span><br><span class="line">    n = len(tdlist) / <span class="number">9</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(int(n)):</span><br><span class="line">        runid = tdlist[i * <span class="number">9</span>].get_text().strip()</span><br><span class="line">        problemid = tdlist[i * <span class="number">9</span> + <span class="number">2</span>].get_text().strip()</span><br><span class="line">        language = tdlist[i * <span class="number">9</span> + <span class="number">6</span>].get_text().strip()[:-<span class="number">5</span>]</span><br><span class="line">        ext = getext(language)</span><br><span class="line">        submittime = tdlist[i * <span class="number">9</span> + <span class="number">8</span>].get_text().strip()</span><br><span class="line">        submittime = <span class="string">'_'</span>.join((submittime.split(<span class="string">' '</span>)[<span class="number">0</span>], submittime.split(<span class="string">' '</span>)[<span class="number">1</span>].replace(<span class="string">':'</span>,<span class="string">''</span>)))</span><br><span class="line">        items.append((runid,problemid,ext,submittime))</span><br><span class="line">    nexturl = soup.find_all(<span class="string">'a'</span>)[-<span class="number">8</span>].get(<span class="string">'href'</span>)</span><br><span class="line">    <span class="keyword">return</span> items, nexturl</span><br></pre></td></tr></table></figure></p>
<ul>
<li><em>Python3</em>里面的除法得到的是<code>float</code>类型了，所以在<code>range()</code>函数中使用的话，要加上<code>int()</code></li>
<li>用<code>get_text()</code>得到标签里面的内容，用<code>strip()</code>去除两端的空白符</li>
<li><code>runid</code>是上面提到的后面会用在<code>url</code>里的内容，<code>problemid</code>题目编号，<code>language</code>是语言，然后转换为后缀扩展名，<code>submittime</code>是提交时间，因为同一个题目可能有同一种语言的多次提交，后面三个都是为了用于最后的文件命名。</li>
<li>对<code>submittime</code>的小处理，将<code>yyyy-MM-dd hh:mm:ss</code>的形式转换为<code>yyyy-MM-dd_hhmmss</code>，中间的<code>&#39;_&#39;</code>是为了好看，后面的<code>&#39;:&#39;</code>则是一定要删去的，因为文件命名中不允许存在<code>&#39;:&#39;</code>。</li>
<li>用<code>nexturl = soup.find_all(&#39;a&#39;)[-8].get(&#39;href&#39;)</code>得到下一页的链接地址，因为我看了一下，<code>next page</code>总是倒数第8个链接，用<code>get(&#39;href&#39;)</code>得到<code>&lt;a&gt;</code>的<code>href</code>属性的值。</li>
<li>得到<code>nexturl</code>是为了一直把所有的<code>runid</code>搜集完，我们可以用两个指针，一个是当前界面的<code>url</code>，一个是下一界面的<code>url</code>，当这两个指针相等时候，说明到了最后一页了。</li>
</ul>
<p>得到所有的<code>runid</code>并且存在一个<code>list</code>里面之后，就可以抓到代码界面了。从代码界面中得到代码的纯文本，还是用的<code>BeautifulSoup</code>，因为我发现所有的代码都是在一个<code>&lt;pre&gt;</code>标签里，那么一句话搞定<code>code = soup.pre.get_text()</code></p>
<h2 id="本地保存">本地保存</h2><p>得到代码后，写入文件，代码如下：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 写入文件</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">write</span><span class="params">(filepath, code)</span>:</span></span><br><span class="line">    f = open(filepath, <span class="string">'w'</span>, encoding=<span class="string">'utf-8'</span>, newline=<span class="string">''</span>)</span><br><span class="line">    f.write(code)</span><br><span class="line">    f.close()</span><br></pre></td></tr></table></figure></p>
<ul>
<li><code>open()</code>函数里面第二个参数，我写的是<code>&#39;w&#39;</code>，因为我的<code>code</code>都是经过<code>decode(&#39;utf8&#39;)</code>得到的<code>str</code>类型的数据，而不是<code>decode</code>之前的<code>bytes</code>类型，如果你的<code>code</code>是<code>bytes</code>类型，这里要用<code>&#39;wb&#39;</code>。</li>
<li>第三个参数要加上<code>encoding=&#39;utf-8&#39;</code>，因为中文<em>Windows</em>系统默认编码是<code>gbk</code></li>
<li>第四个参数加上<code>newline=&#39;&#39;</code>，否则写出来的代码每一行下面都会多一个空行。</li>
</ul>
<p><font color="red"><strong>完整的代码为：</strong></font><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> gzip</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> http.cookiejar</span><br><span class="line"><span class="keyword">import</span> urllib.request</span><br><span class="line"><span class="keyword">import</span> urllib.parse</span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"></span><br><span class="line"><span class="comment"># 对gzip的数据解压</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">ungzip</span><span class="params">(data)</span>:</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        print(<span class="string">'正在解压...'</span>)</span><br><span class="line">        data = gzip.decompress(data)</span><br><span class="line">        print(<span class="string">'解压完毕!'</span>)</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        print(<span class="string">'未经压缩，无需解压！'</span>)</span><br><span class="line">    <span class="keyword">return</span> data</span><br><span class="line"></span><br><span class="line"><span class="comment"># 模拟登录</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">login</span><span class="params">()</span>:</span></span><br><span class="line">    cj = http.cookiejar.CookieJar()</span><br><span class="line">    pro = urllib.request.HTTPCookieProcessor(cj)</span><br><span class="line">    opener = urllib.request.build_opener(pro)</span><br><span class="line">    header = &#123;</span><br><span class="line">    <span class="string">'Connection'</span>: <span class="string">'Keep-Alive'</span>,</span><br><span class="line">    <span class="string">'Accept'</span>: <span class="string">'text/html, application/xhtml+xml, */*'</span>,</span><br><span class="line">    <span class="string">'Accept-Language'</span>: <span class="string">'zh-Hans-CN,zh-Hans;q=0.7,ja;q=0.3'</span>,</span><br><span class="line">    <span class="string">'User-Agent'</span>: <span class="string">'Mozilla/5.0 (Windows NT 6.3; WOW64; Trident/7.0; LCJB; rv:11.0) like Gecko'</span>,</span><br><span class="line">    <span class="string">'Host'</span>: <span class="string">'acm.csu.edu.cn'</span>,</span><br><span class="line">    <span class="string">'Accept-Encoding'</span>: <span class="string">'gzip, deflate'</span>,</span><br><span class="line">    <span class="string">'DNT'</span>: <span class="string">'1'</span></span><br><span class="line">    &#125;</span><br><span class="line">    headers = []</span><br><span class="line">    <span class="keyword">for</span> key, value <span class="keyword">in</span> header.items():</span><br><span class="line">        elem = (key, value)</span><br><span class="line">        headers.append(elem)</span><br><span class="line">    opener.addheaders = headers</span><br><span class="line">    url = <span class="string">'http://acm.csu.edu.cn/OnlineJudge/login.php'</span></span><br><span class="line">    myid = <span class="string">'这里填你的账号'</span></span><br><span class="line">    password = <span class="string">'这里是密码'</span></span><br><span class="line">    postDict = &#123;</span><br><span class="line">        <span class="string">'user_id'</span>: myid,</span><br><span class="line">        <span class="string">'password'</span>: password,</span><br><span class="line">        <span class="string">'submit'</span>: <span class="string">'Submit'</span></span><br><span class="line">    &#125;</span><br><span class="line">    postData = urllib.parse.urlencode(postDict).encode()</span><br><span class="line">    opener.open(url, postData)</span><br><span class="line">    <span class="keyword">return</span> opener</span><br><span class="line"></span><br><span class="line"><span class="comment"># 抓取数据</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getsoup</span><span class="params">(opener, url)</span>:</span></span><br><span class="line">    data = opener.open(url).read()</span><br><span class="line">    data = ungzip(data).decode(<span class="string">'utf8'</span>)</span><br><span class="line">    soup = BeautifulSoup(data)</span><br><span class="line">    <span class="keyword">return</span> soup</span><br><span class="line"></span><br><span class="line"><span class="comment"># 文件扩展名</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getext</span><span class="params">(ext)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> ext == <span class="string">'C'</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">'.c'</span></span><br><span class="line">    <span class="keyword">elif</span> ext == <span class="string">'C++'</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">'.cpp'</span></span><br><span class="line">    <span class="keyword">elif</span> ext == <span class="string">'Java'</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">'.java'</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">'.txt'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 处理数据</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">pssoup</span><span class="params">(soup)</span>:</span></span><br><span class="line">    items = []</span><br><span class="line">    tdlist = soup.find_all(<span class="string">'td'</span>)</span><br><span class="line">    n = len(tdlist) / <span class="number">9</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(int(n)):</span><br><span class="line">        runid = tdlist[i * <span class="number">9</span>].get_text().strip()</span><br><span class="line">        problemid = tdlist[i * <span class="number">9</span> + <span class="number">2</span>].get_text().strip()</span><br><span class="line">        language = tdlist[i * <span class="number">9</span> + <span class="number">6</span>].get_text().strip()[:-<span class="number">5</span>]</span><br><span class="line">        ext = getext(language)</span><br><span class="line">        submittime = tdlist[i * <span class="number">9</span> + <span class="number">8</span>].get_text().strip()</span><br><span class="line">        submittime = <span class="string">'_'</span>.join((submittime.split(<span class="string">' '</span>)[<span class="number">0</span>], submittime.split(<span class="string">' '</span>)[<span class="number">1</span>].replace(<span class="string">':'</span>,<span class="string">''</span>)))</span><br><span class="line">        items.append((runid,problemid,ext,submittime))</span><br><span class="line">    nexturl = soup.find_all(<span class="string">'a'</span>)[-<span class="number">8</span>].get(<span class="string">'href'</span>)</span><br><span class="line">    <span class="keyword">return</span> items, nexturl</span><br><span class="line"></span><br><span class="line"><span class="comment"># 得到代码</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getcode</span><span class="params">(soup)</span>:</span></span><br><span class="line">    code = soup.pre.get_text()</span><br><span class="line">    <span class="keyword">return</span> code</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建目录</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">makedir</span><span class="params">(filedir)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> os.path.isdir(filedir):</span><br><span class="line">        os.mkdir(filedir)</span><br><span class="line">    <span class="keyword">return</span> filedir</span><br><span class="line"></span><br><span class="line"><span class="comment"># 文件路径</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getfp</span><span class="params">(filedir, filename, ext)</span>:</span></span><br><span class="line">    filepath = filedir + filename + ext</span><br><span class="line">    <span class="keyword">return</span> filepath</span><br><span class="line">    </span><br><span class="line"><span class="comment"># 写入文件</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">write</span><span class="params">(filepath, code)</span>:</span></span><br><span class="line">    f = open(filepath, <span class="string">'w'</span>, encoding=<span class="string">'utf-8'</span>, newline=<span class="string">''</span>)</span><br><span class="line">    f.write(code)</span><br><span class="line">    f.close()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 开始</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">start</span><span class="params">()</span>:</span></span><br><span class="line">    fileids = []</span><br><span class="line">    opener = login()</span><br><span class="line">    purl = <span class="string">''</span></span><br><span class="line">    nurl = <span class="string">'http://acm.csu.edu.cn/OnlineJudge/status.php?user_id=你的ID&amp;jresult=4'</span></span><br><span class="line">    ourl1 = <span class="string">'http://acm.csu.edu.cn/OnlineJudge/'</span></span><br><span class="line">    ourl2 = <span class="string">'http://acm.csu.edu.cn/OnlineJudge/showsource.php?id='</span></span><br><span class="line">    filedir = <span class="string">'E:/File/coj/'</span></span><br><span class="line">    filedir = makedir(filedir)</span><br><span class="line">    <span class="keyword">while</span> purl != nurl:</span><br><span class="line">        soup = getsoup(opener, nurl)</span><br><span class="line">        items, nexturl = pssoup(soup)</span><br><span class="line">        fileids += items</span><br><span class="line">        purl = nurl</span><br><span class="line">        nurl = ourl1 + nexturl</span><br><span class="line">    <span class="keyword">for</span> item <span class="keyword">in</span> fileids:</span><br><span class="line">        runid,problemid,ext,submittime = item</span><br><span class="line">        filename = <span class="string">'_'</span>.join((problemid,submittime))</span><br><span class="line">        url = ourl2 + runid</span><br><span class="line">        soup = getsoup(opener, url)</span><br><span class="line">        code = getcode(soup)</span><br><span class="line">        filepath = getfp(filedir, filename, ext)</span><br><span class="line">        write(filepath, code)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 运行</span></span><br><span class="line">start()</span><br></pre></td></tr></table></figure></p>
<blockquote>
<p>关于里面的<code>ungzip</code>函数，是因为现在的很多网站为了提高加载速度，都对数据进行了压缩（参见<code>headers</code>里有这么一条<code>&#39;Accept-Encoding&#39;: &#39;gzip, deflate&#39;</code>），我们拿到数据的话，要对其进行解压，<em>Python</em>有自带的解压工具，直接<code>import gzip</code>即可。</p>
</blockquote>
<p>最后，晒一下得到的文件：<br><img src="http://7xj2nk.com1.z0.glb.clouddn.com/2015-06-10-image10.jpg" alt=""></p>
<p>由于本屌的翔一般的代码书写能力，这里就不放出这些代码了。</p>
<h2 id="友情提示">友情提示</h2><p>没事不要写个爬虫到处乱逛，本屌的<code>ip</code>已被百度贴吧封禁<font color="red">10</font>天-_-||</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>最近在看<a href="http://www.nltk.org/book/"><code>《Natural Language Processing with Python》</code></a>,看到第三章讲用Python从网上爬数据时候，突然就想做个爬虫玩玩了。当然，最先想到的是拿教务管理系统开刀，但是没什么实际意义。玩着游戏时候，又想到在OJ上提交过的代码，有上百个文件，一直很想整理一下，但是一个一个文件去打开网页复制代码，保存到本地，这种事情想想就很蛋疼，还是交给计算机做比较合理。</p>]]>
    
    </summary>
    
      <category term="python3" scheme="http://yoursite.com/tags/python3/"/>
    
      <category term="爬虫" scheme="http://yoursite.com/tags/%E7%88%AC%E8%99%AB/"/>
    
      <category term="Python3" scheme="http://yoursite.com/categories/Python3/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[配置JSP+Servlet+mysql的开发环境]]></title>
    <link href="http://yoursite.com/2015/05/15/%E9%85%8D%E7%BD%AEJSP+Servlet+mysql%E7%9A%84%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/"/>
    <id>http://yoursite.com/2015/05/15/配置JSP+Servlet+mysql的开发环境/</id>
    <published>2015-05-15T13:48:39.000Z</published>
    <updated>2015-09-27T16:50:39.760Z</updated>
    <content type="html"><![CDATA[<p>最近给一个哥们做毕设，要<code>JSP</code>+<code>Servlet</code>+<code>mysql</code>的，但是换了电脑啥环境都没了，连jdk都没装，只好重新配一遍了。<br><a id="more"></a></p>
<h2 id="JDK环境变量">JDK环境变量</h2><h3 id="下载安装">下载安装</h3><p>我用的是 <strong>jdk1.6</strong>，因为我的<code>myeclipse</code>版本不高，编译器只到1.6，高版本的java感觉也用不上，就选了jdk1.6，这里是<strong>64位</strong>的下载地址：<a href="http://pan.baidu.com/s/1c0tWxEw" target="_blank" rel="external">JDK1.6</a></p>
<p>下载完了，按照步骤提示安装就好了，会安装两次，一次<code>jdk</code>，一次<code>jre</code>，想换安装路径的话，注意手动设一下，我的没设置，就默认安到<code>C:\Program Files\Java</code>了。</p>
<h3 id="配置环境变量：">配置环境变量：</h3><blockquote>
<ul>
<li>在【我的电脑】右键，选择【属性】，点击【高级系统设置】，在选项卡【高级】里点击【环境变量】，具体如下：</li>
</ul>
</blockquote>
<p><img src="http://7xj2nk.com1.z0.glb.clouddn.com/2015-05-14-image1.png" alt=""></p>
<p><img src="http://7xj2nk.com1.z0.glb.clouddn.com/2015-05-14-image2.png" alt=""></p>
<p><strong>添加系统环境变量：<code>JAVA_HOME</code></strong></p>
<blockquote>
<ul>
<li>变量名：JAVA_HOME<br>变量值：C:\Program Files\Java\jdk1.6.0_43  （JDK的安装路径）<br>具体如下：</li>
</ul>
</blockquote>
<p><img src="http://7xj2nk.com1.z0.glb.clouddn.com/2015-05-14-image3.png" alt=""></p>
<p><img src="http://7xj2nk.com1.z0.glb.clouddn.com/2015-05-14-image4.png" alt=""></p>
<p><strong>添加系统环境变量：<code>CLASSPATH</code></strong></p>
<blockquote>
<ul>
<li>变量名：CLASSPATH<br>变量值： .;%JAVA_HOME%\lib;%JAVA_HOME%\lib\tools.jar<br>具体如下：</li>
</ul>
</blockquote>
<p><img src="http://7xj2nk.com1.z0.glb.clouddn.com/2015-05-14-image5.png" alt=""></p>
<p><strong>修改系统环境变量：<code>Path</code></strong></p>
<blockquote>
<ul>
<li>变量名：Path<br>变量值：（在原有变量值后面添加）;%JAVA_HOME%\bin;%JAVA_HOME%\jre\bin;<br>具体如下：</li>
</ul>
</blockquote>
<p><img src="http://7xj2nk.com1.z0.glb.clouddn.com/2015-05-14-image6.png" alt=""></p>
<p><img src="http://7xj2nk.com1.z0.glb.clouddn.com/2015-05-14-image7.png" alt=""></p>
<p><strong>验证Java环境配置完成</strong></p>
<blockquote>
<ul>
<li>按<code>win</code>+<code>R</code>打开运行，输入<code>cmd</code>，打开命令提示符，在命令提示符输入<code>java -version</code>，若出现以下画面则配置成功。</li>
</ul>
</blockquote>
<p><img src="http://7xj2nk.com1.z0.glb.clouddn.com/2015-05-14-image8.png" alt=""></p>
<p><img src="http://7xj2nk.com1.z0.glb.clouddn.com/2015-05-14-image9.png" alt=""></p>
<hr>
<h2 id="安装Myeclipse">安装Myeclipse</h2><ul>
<li>这里是<code>Myeclipse10.0</code>的下载地址：<a href="http://pan.baidu.com/s/1bnhhpBh" target="_blank" rel="external">Myeclipse10.0</a></li>
<li>这里是破解工具：<a href="http://pan.baidu.com/s/1gdw8h6j" target="_blank" rel="external">Myeclipse10.0破解工具</a></li>
</ul>
<p>将上面安装的jdk添加到Myeclipse中：<br>打开Myeclipse，点击菜单栏上的<code>window</code>，选择<code>preferences</code>，然后依次选择<code>Java</code>，<code>Installed JREs</code>，<code>Add</code>，如图：</p>
<p><img src="http://7xj2nk.com1.z0.glb.clouddn.com/2015-05-14-image14.png" alt=""></p>
<p>选择<code>Standard VM</code>，如图：</p>
<p><img src="http://7xj2nk.com1.z0.glb.clouddn.com/2015-05-14-image15.png" alt=""></p>
<p>将Java的安装路径填到图示位置，我的是<code>C:\Program Files\Java\jdk1.6.0_43</code>，下面的<code>name</code>随便填一个，最好跟Java版本有关，我写的是<code>jdk1.6.0_43</code>，然后<code>Finish</code>，如图：</p>
<p><img src="http://7xj2nk.com1.z0.glb.clouddn.com/2015-05-14-image16.png" alt=""></p>
<hr>
<h2 id="安装mysql">安装mysql</h2><h3 id="下载安装-1">下载安装</h3><ul>
<li>这里是<code>mysql</code>的下载地址：<a href="http://pan.baidu.com/s/1ntoo2fB" target="_blank" rel="external">mysql_installer_community_V5.6.21.1_setup</a><br><strong>安装时候需要记住数据库的账号和密码</strong>，一般设为<code>root</code>，<code>root</code></li>
<li>可视化管理工具<code>Navicat for mysql</code>地下载地址：<a href="http://pan.baidu.com/s/1xysYa" target="_blank" rel="external">navicat111_mysql_en_x64</a></li>
<li>驱动下载：<a href="http://pan.baidu.com/s/1qWoisGk" target="_blank" rel="external">mysql-connector-java-5.1.7-bin</a></li>
</ul>
<h3 id="与Myeclipse的配置">与Myeclipse的配置</h3><p>点击菜单栏<code>window</code>，依次选择<code>Open Perspective</code>，<code>MyEclipse Database Explorer</code>，在左边空白区域，右键，选择<code>New</code>，然后按下图配置，其中<code>Connection URL</code>改为<code>jdbc:mysql://localhost:3306/test</code>，<code>test</code>是自己的mysql数据库的名字，输入这个数据库的账号和密码，点击<code>Add JARs</code>，把上面下载的驱动放进去，然后点击<code>Finish</code>即可。<br>此时，右键<code>Open connection</code>应该能看到mysql数据库里面的表，前提是mysql开启的情况下，开启的步骤为：回到桌面，<code>计算机</code>，右键，<code>管理</code>，<code>服务</code>，<code>Crtl</code>+<code>F</code>，输入<code>m</code>，找到mysql的服务项，右键，<code>开启</code>。</p>
<p><img src="http://7xj2nk.com1.z0.glb.clouddn.com/2015-05-14-image19.png" alt=""></p>
<p>此时把视角调到<code>MyEclipse Java Enterprise</code>,回到自己的工程上，右键<code>Bulid Path</code>-&gt;<code>Add Libraries</code>-&gt;<code>User Library</code>-&gt;<code>User Libraries</code>-&gt;<code>New</code>-&gt;起个名字-&gt;<code>Add JARs</code>-&gt;添加mysql的驱动。</p>
<hr>
<h2 id="安装Tomcat">安装Tomcat</h2><h3 id="下载安装-2">下载安装</h3><ul>
<li>这里是<code>Tomcat7.0</code>的下载地址：</li>
</ul>
<h3 id="配置环境变量">配置环境变量</h3><p>像上面配置Java的环境变量一样：</p>
<blockquote>
<ul>
<li>变量名：CATALINA_HOME<br>变量值：D:\software\Apache Software Foundation\Tomcat 7.0 (刚刚安装的路径)</li>
</ul>
</blockquote>
<p>如图所示：<br><img src="http://7xj2nk.com1.z0.glb.clouddn.com/2015-05-14-image10.png" alt=""></p>
<h3 id="测试配置是否成功">测试配置是否成功</h3><ul>
<li>找到安装路径下的<code>bin</code>文件夹，找到里面的执行文件<code>Tomcat7w.exe</code>，运行（如果拒绝访问，请<strong>右键</strong>，<strong>以管理员身份运行</strong>），然后执行下面的操作。</li>
<li>打开浏览器，输入<code>http：//localhost:8080</code>.如果出现下面的内容说明成功了。</li>
</ul>
<p><img src="http://7xj2nk.com1.z0.glb.clouddn.com/2015-05-14-image11.png" alt=""></p>
<p><img src="http://7xj2nk.com1.z0.glb.clouddn.com/2015-05-14-image12.png" alt=""></p>
<p><img src="http://7xj2nk.com1.z0.glb.clouddn.com/2015-05-14-image13.png" alt=""></p>
<h3 id="与Myeclipse的配置-1">与Myeclipse的配置</h3><p>打开Myeclipse，点击菜单栏上的<code>window</code>，选择<code>preferences</code>，在左上角的搜索框输入<code>tomcat</code>，选择对应的Tomcat版本，这里选择的是Tomcat7.x，在<code>Tomcat home directory</code>处填写Tomcat的安装路径，我的是<code>D:\software\Apache Software Foundation\Tomcat 7.0</code>，下面两个会自动生成，最后点击<code>Enable</code>。</p>
<p><img src="http://7xj2nk.com1.z0.glb.clouddn.com/2015-05-14-image17.png" alt=""></p>
<p>如图，点击<code>JDK</code>，选择上面设置好的<code>jdk1.6.0_43</code></p>
<p><img src="http://7xj2nk.com1.z0.glb.clouddn.com/2015-05-14-image18.png" alt=""></p>
<p><strong>最后把mysql的驱动<code>mysql-connector-java-5.1.7-bin</code>，放到Tomcat的lib文件夹<code>D:\software\Apache Software Foundation\Tomcat 7.0\lib</code>下。</strong></p>
<hr>
<h2 id="模板">模板</h2><p>配置完了，就该写代码了。<br>下面是一份<code>JSP</code>+<code>Servlet</code>+<code>mysql</code>的模板。</p>
<ul>
<li>第一步：Web.xml</li>
</ul>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="pi">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">web-app</span> <span class="attribute">version</span>=<span class="value">"2.5"</span> <span class="attribute">xmlns</span>=<span class="value">"http://java.sun.com/xml/ns/javaee"</span></span><br><span class="line">	<span class="attribute">xmlns:xsi</span>=<span class="value">"http://www.w3.org/2001/XMLSchema-instance"</span></span><br><span class="line">	<span class="attribute">xsi:schemaLocation</span>=<span class="value">"http://java.sun.com/xml/ns/javaee</span><br><span class="line"> http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd"</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="title">welcome-file-list</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="title">welcome-file</span>&gt;</span>login.jsp<span class="tag">&lt;/<span class="title">welcome-file</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="title">welcome-file-list</span>&gt;</span></span><br><span class="line"></span><br><span class="line">	<span class="tag">&lt;<span class="title">servlet</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="title">description</span>&gt;</span>This is the description of my J2EE component<span class="tag">&lt;/<span class="title">description</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="title">display-name</span>&gt;</span>This is the display name of my J2EE component<span class="tag">&lt;/<span class="title">display-name</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="title">servlet-name</span>&gt;</span>loginServlet<span class="tag">&lt;/<span class="title">servlet-name</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="title">servlet-class</span>&gt;</span>com.servlet.loginServlet<span class="tag">&lt;/<span class="title">servlet-class</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="title">servlet</span>&gt;</span></span><br><span class="line"></span><br><span class="line">	<span class="tag">&lt;<span class="title">servlet-mapping</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="title">servlet-name</span>&gt;</span>loginServlet<span class="tag">&lt;/<span class="title">servlet-name</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="title">url-pattern</span>&gt;</span>/loginServlet<span class="tag">&lt;/<span class="title">url-pattern</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="title">servlet-mapping</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ul>
<li>第二步：数据库</li>
</ul>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span><br><span class="line">SQLyog Ultimate v8.32 </span><br><span class="line">MySQL - 5.5.23 : Database - student</span><br><span class="line">*********************************************************************</span><br><span class="line">*/</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/*!40101 SET NAMES utf8 */</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*!40101 SET SQL_MODE=''*/</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*!40014 SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0 */</span>;</span><br><span class="line"><span class="comment">/*!40014 SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0 */</span>;</span><br><span class="line"><span class="comment">/*!40101 SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='NO_AUTO_VALUE_ON_ZERO' */</span>;</span><br><span class="line"><span class="comment">/*!40111 SET @OLD_SQL_NOTES=@@SQL_NOTES, SQL_NOTES=0 */</span>;</span><br><span class="line"><span class="operator"><span class="keyword">CREATE</span> <span class="keyword">DATABASE</span> <span class="comment">/*!32312 IF NOT EXISTS*/</span><span class="string">`student`</span> <span class="comment">/*!40100 DEFAULT CHARACTER SET utf8 */</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="operator"><span class="keyword">USE</span> <span class="string">`student`</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*Table structure for table `user` */</span></span><br><span class="line"></span><br><span class="line"><span class="operator"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> <span class="keyword">IF</span> <span class="keyword">EXISTS</span> <span class="string">`user`</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="operator"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`user`</span> (</span><br><span class="line">  <span class="string">`id`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT,</span><br><span class="line">  <span class="string">`user`</span> <span class="built_in">varchar</span>(<span class="number">50</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`pwd`</span> <span class="built_in">varchar</span>(<span class="number">50</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`name`</span> <span class="built_in">varchar</span>(<span class="number">50</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`age`</span> <span class="built_in">int</span>(<span class="number">50</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> <span class="keyword">KEY</span> (<span class="string">`id`</span>)</span><br><span class="line">) <span class="keyword">ENGINE</span>=<span class="keyword">InnoDB</span> AUTO_INCREMENT=<span class="number">2</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*Data for the table `user` */</span></span><br><span class="line"></span><br><span class="line"><span class="operator"><span class="keyword">insert</span>  <span class="keyword">into</span> <span class="string">`user`</span>(<span class="string">`id`</span>,<span class="string">`user`</span>,<span class="string">`pwd`</span>,<span class="string">`name`</span>,<span class="string">`age`</span>) <span class="keyword">values</span> (<span class="number">1</span>,<span class="string">'zhangsan'</span>,<span class="string">'123'</span>,<span class="string">'张三'</span>,<span class="number">21</span>);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*!40101 SET SQL_MODE=@OLD_SQL_MODE */</span>;</span><br><span class="line"><span class="comment">/*!40014 SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS */</span>;</span><br><span class="line"><span class="comment">/*!40014 SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS */</span>;</span><br><span class="line"><span class="comment">/*!40111 SET SQL_NOTES=@OLD_SQL_NOTES */</span>;</span><br></pre></td></tr></table></figure>
<ul>
<li>第三步：login.jsp</li>
</ul>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">%@</span> <span class="attribute">page</span> <span class="attribute">language</span>=<span class="value">"java"</span> <span class="attribute">contentType</span>=<span class="value">"text/html; charset=UTF-8"</span> <span class="attribute">pageEncoding</span>=<span class="value">"UTF-8"</span><span class="value">%</span>&gt;</span></span><br><span class="line">    <span class="doctype">&lt;!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">html</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">title</span>&gt;</span>xx系统<span class="tag">&lt;/<span class="title">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">meta</span> <span class="attribute">http-equiv</span>=<span class="value">"pragma"</span> <span class="attribute">content</span>=<span class="value">"no-cache"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">meta</span> <span class="attribute">http-equiv</span>=<span class="value">"cache-control"</span> <span class="attribute">content</span>=<span class="value">"no-cache"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">meta</span> <span class="attribute">http-equiv</span>=<span class="value">"expires"</span> <span class="attribute">content</span>=<span class="value">"0"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">meta</span> <span class="attribute">http-equiv</span>=<span class="value">"keywords"</span> <span class="attribute">content</span>=<span class="value">"keyword1,keyword2,keyword3"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">meta</span> <span class="attribute">http-equiv</span>=<span class="value">"description"</span> <span class="attribute">content</span>=<span class="value">"This is my page"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--</span><br><span class="line">    &lt;link rel="stylesheet" type="text/css" href="styles.css"&gt;</span><br><span class="line">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="title">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="title">body</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">div</span> <span class="attribute">align</span>=<span class="value">"center"</span>&gt;</span> <span class="tag">&lt;<span class="title">font</span> <span class="attribute">size</span>=<span class="value">" 2"</span> <span class="attribute">color</span>=<span class="value">"#FF6633"</span>&gt;</span>用户登录<span class="tag">&lt;/<span class="title">font</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">form</span> <span class="attribute">id</span>=<span class="value">"form1"</span> <span class="attribute">name</span>=<span class="value">"form1"</span> <span class="attribute">method</span>=<span class="value">"post"</span> <span class="attribute">action</span>=<span class="value">"loginServlet"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">table</span> <span class="attribute">width</span>=<span class="value">"357"</span> <span class="attribute">border</span>=<span class="value">"0"</span> <span class="attribute">align</span>=<span class="value">"center"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">tr</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="title">td</span> <span class="attribute">width</span>=<span class="value">"128"</span>&gt;</span>用户名：<span class="tag">&lt;/<span class="title">td</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="title">td</span> <span class="attribute">width</span>=<span class="value">"219"</span>&gt;</span><span class="tag">&lt;<span class="title">label</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="title">input</span> <span class="attribute">name</span>=<span class="value">"user"</span> <span class="attribute">type</span>=<span class="value">"text"</span> <span class="attribute">id</span>=<span class="value">"user"</span> /&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="title">label</span>&gt;</span><span class="tag">&lt;/<span class="title">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="title">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">tr</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="title">td</span>&gt;</span>密　码：<span class="tag">&lt;/<span class="title">td</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="title">td</span>&gt;</span><span class="tag">&lt;<span class="title">label</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="title">input</span> <span class="attribute">name</span>=<span class="value">"pwd"</span> <span class="attribute">type</span>=<span class="value">"password"</span> <span class="attribute">id</span>=<span class="value">"pwd"</span> /&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="title">label</span>&gt;</span><span class="tag">&lt;/<span class="title">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="title">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">tr</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="title">td</span>&gt;</span><span class="tag">&lt;<span class="title">label</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="title">input</span> <span class="attribute">type</span>=<span class="value">"submit"</span> <span class="attribute">name</span>=<span class="value">"Submit"</span> <span class="attribute">value</span>=<span class="value">"登录"</span> /&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="title">label</span>&gt;</span><span class="tag">&lt;/<span class="title">td</span>&gt;</span></span><br><span class="line">         </span><br><span class="line">        <span class="tag">&lt;/<span class="title">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="title">table</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">p</span>&gt;</span> <span class="tag">&lt;/<span class="title">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="title">form</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="title">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="title">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ul>
<li>第四步：success.jsp</li>
</ul>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">%@</span> <span class="attribute">page</span> <span class="attribute">language</span>=<span class="value">"java"</span> <span class="attribute">contentType</span>=<span class="value">"text/html; charset=ISO-8859-1"</span></span><br><span class="line">    <span class="attribute">pageEncoding</span>=<span class="value">"ISO-8859-1"</span><span class="value">%</span>&gt;</span></span><br><span class="line"><span class="doctype">&lt;!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd"&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">meta</span> <span class="attribute">http-equiv</span>=<span class="value">"Content-Type"</span> <span class="attribute">content</span>=<span class="value">"text/html; charset=ISO-8859-1"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">title</span>&gt;</span>Insert title here<span class="tag">&lt;/<span class="title">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">body</span>&gt;</span></span><br><span class="line">	$&#123;address &#125;<span class="tag">&lt;/<span class="title">br</span>&gt;</span></span><br><span class="line">	$&#123;port &#125;<span class="tag">&lt;/<span class="title">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ul>
<li>第五步：LoginServlet.java</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.servlet;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.PrintWriter;</span><br><span class="line"><span class="keyword">import</span> java.net.InetAddress;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpSession;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.dao.Dao;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">loginServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">super</span>.destroy(); <span class="comment">// Just puts "destroy" string in log</span></span><br><span class="line"></span><br><span class="line">		<span class="comment">// Put your code here</span></span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span></span><br><span class="line">			<span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">		request.setCharacterEncoding(<span class="string">"utf-8"</span>);</span><br><span class="line">		response.setContentType(<span class="string">"text/html"</span>);</span><br><span class="line">		PrintWriter out = response.getWriter();</span><br><span class="line">		String name = <span class="keyword">new</span> String(request.getParameter(<span class="string">"user"</span>).getBytes(</span><br><span class="line">				<span class="string">"ISO8859_1"</span>), <span class="string">"GBK"</span>);</span><br><span class="line">		String pwd = <span class="keyword">new</span> String(request.getParameter(<span class="string">"pwd"</span>).getBytes(</span><br><span class="line">				<span class="string">"ISO8859_1"</span>), <span class="string">"UTF-8"</span>);</span><br><span class="line">		User user = <span class="keyword">new</span> User();</span><br><span class="line">		user.setUser(name);</span><br><span class="line">		user.setPwd(pwd);</span><br><span class="line">		Dao dao = <span class="keyword">new</span> Dao();</span><br><span class="line">		<span class="keyword">boolean</span> isLogin;</span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			isLogin = dao.logoin(user);</span><br><span class="line"></span><br><span class="line">			<span class="keyword">if</span> (isLogin) &#123;</span><br><span class="line">				InetAddress inetAddress = InetAddress.getLocalHost();</span><br><span class="line">				String m = inetAddress.getHostAddress();</span><br><span class="line">				<span class="keyword">int</span> n = request.getRemotePort();</span><br><span class="line">				System.out.println(m+<span class="string">"*********"</span>+ n);</span><br><span class="line">				HttpSession session = request.getSession(); </span><br><span class="line">				session.setAttribute(<span class="string">"address"</span>, m);</span><br><span class="line">				session.setAttribute(<span class="string">"port"</span>, n);</span><br><span class="line">				response.sendRedirect(<span class="string">"success.jsp"</span>);</span><br><span class="line">			&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">				response.sendRedirect(<span class="string">"index.jsp"</span>);</span><br><span class="line">			&#125;</span><br><span class="line"></span><br><span class="line">		&#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">			e.printStackTrace();</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span></span><br><span class="line">			<span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">		doPost(request, response);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> <span class="keyword">throws</span> ServletException </span>&#123;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.servlet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">	<span class="keyword">private</span> String user;</span><br><span class="line">	<span class="keyword">private</span> String pwd;</span><br><span class="line">	<span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">getUser</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> user;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUser</span><span class="params">(String user)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.user = user;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">getPwd</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> pwd;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPwd</span><span class="params">(String pwd)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.pwd = pwd;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> name;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.name = name;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> age;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.age = age;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.util;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.DriverManager;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GetConnection</span> </span>&#123;</span><br><span class="line">	<span class="comment">//通过静态方法注册驱动，获得连接</span></span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Connection <span class="title">getConnection</span><span class="params">()</span></span>&#123;</span><br><span class="line">	   String driver = <span class="string">"com.mysql.jdbc.Driver"</span>;</span><br><span class="line">	   String url = <span class="string">"jdbc:mysql://localhost/student"</span>;</span><br><span class="line">	   Connection con = <span class="keyword">null</span>;</span><br><span class="line">	   <span class="keyword">try</span> &#123;</span><br><span class="line">	    Class.forName(driver);</span><br><span class="line">	    <span class="keyword">try</span> &#123;</span><br><span class="line">	     con = DriverManager.getConnection(url,<span class="string">"root"</span>,<span class="string">"123456"</span>);</span><br><span class="line">	    &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">	     e.printStackTrace();</span><br><span class="line">	    &#125;</span><br><span class="line">	   &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">	    e.printStackTrace();</span><br><span class="line">	   &#125;</span><br><span class="line">	   System.out.println(<span class="string">"已获得数据库的连接"</span>);</span><br><span class="line">	   <span class="keyword">return</span> con;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">/*public static void main(String args[])&#123;</span><br><span class="line">	   getConnection();</span><br><span class="line">	&#125;*/</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.dao;</span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.PreparedStatement;</span><br><span class="line"><span class="keyword">import</span> java.sql.ResultSet;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.servlet.User;</span><br><span class="line"><span class="keyword">import</span> com.util.GetConnection;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Dao</span> </span>&#123;</span><br><span class="line">	<span class="keyword">private</span> Connection conn;</span><br><span class="line">	<span class="keyword">private</span> PreparedStatement pstat;</span><br><span class="line">	String sql = <span class="string">""</span>;</span><br><span class="line"></span><br><span class="line">	<span class="javadoc">/**</span><br><span class="line">	 *</span><br><span class="line">	 * 用户登录</span><br><span class="line">	 */</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">logoin</span><span class="params">(User user)</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">		conn = GetConnection.getConnection();</span><br><span class="line">		<span class="keyword">boolean</span> i = <span class="keyword">false</span>;</span><br><span class="line">		sql = <span class="string">"select * from user where user=? and pwd=?"</span>;</span><br><span class="line"></span><br><span class="line">		pstat = conn.prepareStatement(sql);</span><br><span class="line"></span><br><span class="line">		pstat.setString(<span class="number">1</span>, user.getUser());</span><br><span class="line">		pstat.setString(<span class="number">2</span>, user.getPwd());</span><br><span class="line"></span><br><span class="line">		ResultSet rs1 = (ResultSet) pstat.executeQuery();</span><br><span class="line">		<span class="keyword">if</span> (rs1.next()) &#123;</span><br><span class="line">			i = <span class="keyword">true</span>;</span><br><span class="line">			rs1.close();</span><br><span class="line">			pstat.close();</span><br><span class="line">		&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">			i = <span class="keyword">false</span>;</span><br><span class="line">			rs1.close();</span><br><span class="line">			pstat.close();</span><br><span class="line">		&#125;</span><br><span class="line">		conn.close();</span><br><span class="line">		<span class="keyword">return</span> i;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="javadoc">/**</span><br><span class="line">	 * 用户注册</span><br><span class="line">	 */</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addUser</span><span class="params">(User user)</span> </span>&#123;</span><br><span class="line">		conn = GetConnection.getConnection();</span><br><span class="line">		sql = <span class="string">"insert into user values(?,?,?,?)"</span>;</span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			pstat = conn.prepareStatement(sql);</span><br><span class="line">			pstat.setString(<span class="number">1</span>, user.getUser());</span><br><span class="line">			pstat.setString(<span class="number">2</span>, user.getPwd());</span><br><span class="line">			pstat.setString(<span class="number">3</span>, user.getName());</span><br><span class="line"></span><br><span class="line">			pstat.setInt(<span class="number">5</span>, user.getAge());</span><br><span class="line">			pstat.executeUpdate();</span><br><span class="line">			pstat.close();</span><br><span class="line">			conn.close();</span><br><span class="line"></span><br><span class="line">		&#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">			e.printStackTrace();</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>其他的功能和界面参考上面的写就可以了。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>最近给一个哥们做毕设，要<code>JSP</code>+<code>Servlet</code>+<code>mysql</code>的，但是换了电脑啥环境都没了，连jdk都没装，只好重新配一遍了。<br>]]>
    
    </summary>
    
      <category term="JSP" scheme="http://yoursite.com/tags/JSP/"/>
    
      <category term="mysql" scheme="http://yoursite.com/tags/mysql/"/>
    
      <category term="Java" scheme="http://yoursite.com/categories/Java/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[测试多媒体]]></title>
    <link href="http://yoursite.com/2015/05/12/testMultiMedia/"/>
    <id>http://yoursite.com/2015/05/12/testMultiMedia/</id>
    <published>2015-05-12T12:21:04.000Z</published>
    <updated>2015-09-27T16:53:24.799Z</updated>
    <content type="html"><![CDATA[<p>这篇文章主要是测试一下插入图片，音乐和视频。</p>
<a id="more"></a>
<h1 id="图片">图片</h1><p>代码：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">![cmd-markdown-logo](http://7xj2nk.com1.z0.glb.clouddn.com/2015-05-13-image1.png)</span><br></pre></td></tr></table></figure></p>
<p>效果<br><img src="http://7xj2nk.com1.z0.glb.clouddn.com/2015-05-13-image1.png" alt="cmd-markdown-logo"></p>
<h1 id="音乐">音乐</h1><p>代码1（虾米）：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">embed</span> <span class="attribute">src</span>=<span class="value">"http://www.xiami.com/widget/0_1773265410/singlePlayer.swf"</span> <span class="attribute">type</span>=<span class="value">"application/x-shockwave-flash"</span> <span class="attribute">width</span>=<span class="value">"257"</span> <span class="attribute">height</span>=<span class="value">"33"</span> <span class="attribute">wmode</span>=<span class="value">"transparent"</span>&gt;</span><span class="tag">&lt;/<span class="title">embed</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>效果：</p>
<div><br><embed src="http://www.xiami.com/widget/0_1773265410/singlePlayer.swf" type="application/x-shockwave-flash" width="257" height="33" wmode="transparent"><br></div>

<p>代码2（网易）：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">iframe</span> <span class="attribute">frameborder</span>=<span class="value">"no"</span> <span class="attribute">border</span>=<span class="value">"0"</span> <span class="attribute">marginwidth</span>=<span class="value">"0"</span> <span class="attribute">marginheight</span>=<span class="value">"0"</span> <span class="attribute">width</span>=<span class="value">330</span> <span class="attribute">height</span>=<span class="value">86</span> <span class="attribute">src</span>=<span class="value">"http://music.163.com/outchain/player?type=2&amp;amp;id=28639182&amp;amp;auto=1&amp;amp;height=66"</span>&gt;</span><span class="tag">&lt;/<span class="title">iframe</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>效果：</p>
<div><br><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="http://music.163.com/outchain/player?type=2&amp;id=28639182&amp;auto=1&amp;height=66"></iframe><br></div>

<p>这里总是有一大片莫名其妙的空白。。</p>
<h1 id="视频">视频</h1><p>代码：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">iframe</span> <span class="attribute">height</span>=<span class="value">498</span> <span class="attribute">width</span>=<span class="value">510</span> <span class="attribute">src</span>=<span class="value">"http://player.youku.com/embed/XNjIyNDU1ODU2"</span> <span class="attribute">frameborder</span>=<span class="value">0</span> <span class="attribute">allowfullscreen</span>&gt;</span><span class="tag">&lt;/<span class="title">iframe</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>效果：</p>
<iframe height="498" width="510" src="http://player.youku.com/embed/XNjIyNDU1ODU2" frameborder="0" allowfullscreen></iframe>]]></content>
    <summary type="html">
    <![CDATA[<p>这篇文章主要是测试一下插入图片，音乐和视频。</p>]]>
    
    </summary>
    
      <category term="hexo" scheme="http://yoursite.com/tags/hexo/"/>
    
      <category term="test" scheme="http://yoursite.com/tags/test/"/>
    
      <category term="Hexo" scheme="http://yoursite.com/categories/Hexo/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[欢迎使用 Cmd Markdown 编辑阅读器]]></title>
    <link href="http://yoursite.com/2015/05/12/%E6%AC%A2%E8%BF%8E%E4%BD%BF%E7%94%A8%20Cmd%20Markdown%20%E7%BC%96%E8%BE%91%E9%98%85%E8%AF%BB%E5%99%A8/"/>
    <id>http://yoursite.com/2015/05/12/欢迎使用 Cmd Markdown 编辑阅读器/</id>
    <published>2015-05-12T10:08:16.000Z</published>
    <updated>2015-10-11T19:09:23.852Z</updated>
    <content type="html"><![CDATA[<p>我们理解您需要更便捷更高效的工具记录思想，整理笔记、知识，并将其中承载的价值传播给他人，<strong>Cmd Markdown</strong> 是我们给出的答案 —— 我们为记录思想和分享知识提供更专业的工具。 您可以使用 Cmd Markdown：</p>
<blockquote>
<ul>
<li>整理知识，学习笔记</li>
<li>发布日记，杂文，所见所想</li>
<li>撰写发布技术文稿（代码支持）</li>
<li>撰写发布学术论文（LaTeX 公式支持）</li>
</ul>
</blockquote>
<a id="more"></a>
<p><img src="https://www.zybuluo.com/static/img/logo.png" alt="cmd-markdown-logo"></p>
<p>除了您现在看到的这个 Cmd Markdown 在线版本，您还可以前往以下网址下载：</p>
<h3 id="Windows/Mac/Linux_全平台客户端"><a href="https://www.zybuluo.com/cmd/" target="_blank" rel="external">Windows/Mac/Linux 全平台客户端</a></h3><blockquote>
<p>请保留此份 Cmd Markdown 的欢迎稿兼使用说明，如需撰写新稿件，点击顶部工具栏右侧的 <i class="fa">&#xf15b;</i> <strong>新文稿</strong> 或者使用快捷键 <code>Ctrl+Alt+N</code>。</p>
</blockquote>
<hr>
<h2 id="什么是_Markdown">什么是 Markdown</h2><p>Markdown 是一种方便记忆、书写的纯文本标记语言，用户可以使用这些标记符号以最小的输入代价生成极富表现力的文档：譬如您正在阅读的这份文档。它使用简单的符号标记不同的标题，分割不同的段落，<strong>粗体</strong> 或者 <em>斜体</em> 某些文字，更棒的是，它还可以</p>
<h3 id="书写一个质能守恒公式[^LaTeX]">书写一个质能守恒公式[^LaTeX]</h3><p>$$E=mc^2$$</p>
<h3 id="高亮一段代码[^code]">高亮一段代码[^code]</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="decorator">@requires_authorization</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SomeClass</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    <span class="comment"># A comment</span></span><br><span class="line">    <span class="keyword">print</span> <span class="string">'hello world'</span></span><br></pre></td></tr></table></figure>
<h3 id="高效绘制_流程图">高效绘制 <a href="https://www.zybuluo.com/mdeditor?url=https://www.zybuluo.com/static/editor/md-help.markdown#7-流程图" target="_blank" rel="external">流程图</a></h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">st=&#62;start: Start&#10;op=&#62;operation: Your Operation&#10;cond=&#62;condition: Yes or No?&#10;e=&#62;end&#10;&#10;st-&#62;op-&#62;cond&#10;cond(yes)-&#62;e&#10;cond(no)-&#62;op</span><br></pre></td></tr></table></figure>
<h3 id="高效绘制_序列图">高效绘制 <a href="https://www.zybuluo.com/mdeditor?url=https://www.zybuluo.com/static/editor/md-help.markdown#8-序列图" target="_blank" rel="external">序列图</a></h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Alice-&#62;Bob: Hello Bob, how are you?&#10;Note right of Bob: Bob thinks&#10;Bob--&#62;Alice: I am good thanks!</span><br></pre></td></tr></table></figure>
<h3 id="绘制表格">绘制表格</h3><table>
<thead>
<tr>
<th>项目</th>
<th style="text-align:right">价格</th>
<th style="text-align:center">数量</th>
</tr>
</thead>
<tbody>
<tr>
<td>计算机</td>
<td style="text-align:right">$1600</td>
<td style="text-align:center">5</td>
</tr>
<tr>
<td>手机</td>
<td style="text-align:right">$12</td>
<td style="text-align:center">12</td>
</tr>
<tr>
<td>管线</td>
<td style="text-align:right">$1</td>
<td style="text-align:center">234</td>
</tr>
</tbody>
</table>
<h3 id="更详细语法说明">更详细语法说明</h3><p>想要查看更详细的语法说明，可以参考我们准备的 <a href="https://www.zybuluo.com/mdeditor?url=https://www.zybuluo.com/static/editor/md-help.markdown" target="_blank" rel="external">Cmd Markdown 简明语法手册</a>，进阶用户可以参考 <a href="https://www.zybuluo.com/mdeditor?url=https://www.zybuluo.com/static/editor/md-help.markdown#cmd-markdown-高阶语法手册" target="_blank" rel="external">Cmd Markdown 高阶语法手册</a> 了解更多高级功能。</p>
<p>总而言之，不同于其它 <em>所见即所得</em> 的编辑器：你只需使用键盘专注于书写文本内容，就可以生成印刷级的排版格式，省却在键盘和工具栏之间来回切换，调整内容和格式的麻烦。<strong>Markdown 在流畅的书写和印刷级的阅读体验之间找到了平衡。</strong> 目前它已经成为世界上最大的技术分享网站 GitHub 和 技术问答网站 StackOverFlow 的御用书写格式。</p>
<hr>
<h2 id="什么是_Cmd_Markdown">什么是 Cmd Markdown</h2><p>您可以使用很多工具书写 Markdown，但是 Cmd Markdown 是这个星球上我们已知的、最好的 Markdown 工具——没有之一 ：）因为深信文字的力量，所以我们和你一样，对流畅书写，分享思想和知识，以及阅读体验有极致的追求，我们把对于这些诉求的回应整合在 Cmd Markdown，并且一次，两次，三次，乃至无数次地提升这个工具的体验，最终将它演化成一个 <strong>编辑/发布/阅读</strong> Markdown 的在线平台——您可以在任何地方，任何系统/设备上管理这里的文字。</p>
<h3 id="1-_实时同步预览">1. 实时同步预览</h3><p>我们将 Cmd Markdown 的主界面一分为二，左边为<strong>编辑区</strong>，右边为<strong>预览区</strong>，在编辑区的操作会实时地渲染到预览区方便查看最终的版面效果，并且如果你在其中一个区拖动滚动条，我们有一个巧妙的算法把另一个区的滚动条同步到等价的位置，超酷！</p>
<h3 id="2-_编辑工具栏">2. 编辑工具栏</h3><p>也许您还是一个 Markdown 语法的新手，在您完全熟悉它之前，我们在 <strong>编辑区</strong> 的顶部放置了一个如下图所示的工具栏，您可以使用鼠标在工具栏上调整格式，不过我们仍旧鼓励你使用键盘标记格式，提高书写的流畅度。</p>
<p><img src="https://www.zybuluo.com/static/img/toolbar-editor.png" alt="tool-editor"></p>
<h3 id="3-_编辑模式">3. 编辑模式</h3><p>完全心无旁骛的方式编辑文字：点击 <strong>编辑工具栏</strong> 最右测的拉伸按钮或者按下 <code>Ctrl + M</code>，将 Cmd Markdown 切换到独立的编辑模式，这是一个极度简洁的写作环境，所有可能会引起分心的元素都已经被挪除，超清爽！</p>
<h3 id="4-_实时的云端文稿">4. 实时的云端文稿</h3><p>为了保障数据安全，Cmd Markdown 会将您每一次击键的内容保存至云端，同时在 <strong>编辑工具栏</strong> 的最右侧提示 <code>已保存</code> 的字样。无需担心浏览器崩溃，机器掉电或者地震，海啸——在编辑的过程中随时关闭浏览器或者机器，下一次回到 Cmd Markdown 的时候继续写作。</p>
<h3 id="5-_离线模式">5. 离线模式</h3><p>在网络环境不稳定的情况下记录文字一样很安全！在您写作的时候，如果电脑突然失去网络连接，Cmd Markdown 会智能切换至离线模式，将您后续键入的文字保存在本地，直到网络恢复再将他们传送至云端，即使在网络恢复前关闭浏览器或者电脑，一样没有问题，等到下次开启 Cmd Markdown 的时候，她会提醒您将离线保存的文字传送至云端。简而言之，我们尽最大的努力保障您文字的安全。</p>
<h3 id="6-_管理工具栏">6. 管理工具栏</h3><p>为了便于管理您的文稿，在 <strong>预览区</strong> 的顶部放置了如下所示的 <strong>管理工具栏</strong>：</p>
<p><img src="https://www.zybuluo.com/static/img/toolbar-manager.jpg" alt="tool-manager"></p>
<p>通过管理工具栏可以：</p>
<p><i style="font-family: 'FontAwesome'; width: (18em / 14); text-align: center;">&#xf064;</i> 发布：将当前的文稿生成固定链接，在网络上发布，分享<br><i style="font-family: 'FontAwesome'; width: (18em / 14); text-align: center;">&#xf15b;</i> 新建：开始撰写一篇新的文稿<br><i style="font-family: 'FontAwesome'; width: (18em / 14); text-align: center;">&#xf1f8;</i> 删除：删除当前的文稿<br><i style="font-family: 'FontAwesome'; width: (18em / 14); text-align: center;">&#xf0c2;</i> 导出：将当前的文稿转化为 Markdown 文本或者 Html 格式，并导出到本地<br><i style="font-family: 'FontAwesome'; width: (18em / 14); text-align: center;">&#xf0c9;</i> 列表：所有新增和过往的文稿都可以在这里查看、操作<br><i style="font-family: 'FontAwesome'; width: (18em / 14); text-align: center;">&#xf040;</i> 模式：切换 普通/Vim/Emacs 编辑模式</p>
<h3 id="7-_阅读工具栏">7. 阅读工具栏</h3><p><img src="https://www.zybuluo.com/static/img/toolbar-reader.jpg" alt="tool-manager"></p>
<p>通过 <strong>预览区</strong> 右上角的 <strong>阅读工具栏</strong>，可以查看当前文稿的目录并增强阅读体验。</p>
<p>工具栏上的五个图标依次为：</p>
<p><i class="fa">&#xf03a;</i> 目录：快速导航当前文稿的目录结构以跳转到感兴趣的段落<br><i class="fa">&#xf137;</i> 视图：互换左边编辑区和右边预览区的位置<br><i class="fa">&#xf042;</i> 主题：内置了黑白两种模式的主题，试试 <strong>黑色主题</strong>，超炫！<br><i class="fa">&#xf108;</i> 阅读：心无旁骛的阅读模式提供超一流的阅读体验<br><i class="fa">&#xf0b2;</i> 全屏：简洁，简洁，再简洁，一个完全沉浸式的写作和阅读环境</p>
<h3 id="8-_阅读模式">8. 阅读模式</h3><p>在 <strong>阅读工具栏</strong> 点击 <i class="fa">&#xf108;</i> 或者按下 <code>Ctrl+Alt+M</code> 随即进入独立的阅读模式界面，我们在版面渲染上的每一个细节：字体，字号，行间距，前背景色都倾注了大量的时间，努力提升阅读的体验和品质。</p>
<h3 id="9-_标签、分类和搜索">9. 标签、分类和搜索</h3><p>在编辑区任意行首位置输入以下格式的文字可以标签当前文档：</p>
<p>标签： 未分类</p>
<p>标签以后的文稿在【文件列表】（Ctrl+Alt+F）里会按照标签分类，用户可以同时使用键盘或者鼠标浏览查看，或者在【文件列表】的搜索文本框内搜索标题关键字过滤文稿，如下图所示：</p>
<p><img src="https://www.zybuluo.com/static/img/file-list.png" alt="file-list"></p>
<h3 id="10-_文稿发布和分享">10. 文稿发布和分享</h3><p>在您使用 Cmd Markdown 记录，创作，整理，阅读文稿的同时，我们不仅希望它是一个有力的工具，更希望您的思想和知识通过这个平台，连同优质的阅读体验，将他们分享给有相同志趣的人，进而鼓励更多的人来到这里记录分享他们的思想和知识，尝试点击 <i class="fa">&#xf064;</i> (Ctrl+Alt+P) 发布这份文档给好友吧！</p>
<hr>
<p>再一次感谢您花费时间阅读这份欢迎稿，点击 <i class="fa">&#xf15b;</i> (Ctrl+Alt+N) 开始撰写新的文稿吧！祝您在这里记录、阅读、分享愉快！</p>
<p>作者 <a href="http://weibo.com/ghosert" target="_blank" rel="external">@ghosert</a><br>2015 年 04月 29日    </p>
<p>[^LaTeX]: 支持 <strong>LaTeX</strong> 编辑显示支持，例如：$\sum_{i=1}^n a_i=0$， 访问 <a href="http://meta.math.stackexchange.com/questions/5020/mathjax-basic-tutorial-and-quick-reference" target="_blank" rel="external">MathJax</a> 参考更多使用方法。</p>
<p>[^code]: 代码高亮功能支持包括 Java, Python, JavaScript 在内的，<strong>四十一</strong>种主流编程语言。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>我们理解您需要更便捷更高效的工具记录思想，整理笔记、知识，并将其中承载的价值传播给他人，<strong>Cmd Markdown</strong> 是我们给出的答案 —— 我们为记录思想和分享知识提供更专业的工具。 您可以使用 Cmd Markdown：</p>
<blockquote>
<ul>
<li>整理知识，学习笔记</li>
<li>发布日记，杂文，所见所想</li>
<li>撰写发布技术文稿（代码支持）</li>
<li>撰写发布学术论文（LaTeX 公式支持）</li>
</ul>
</blockquote>]]>
    
    </summary>
    
      <category term="Markdown" scheme="http://yoursite.com/tags/Markdown/"/>
    
      <category term="Markdown" scheme="http://yoursite.com/categories/Markdown/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Hello World]]></title>
    <link href="http://yoursite.com/2015/05/12/hello-world/"/>
    <id>http://yoursite.com/2015/05/12/hello-world/</id>
    <published>2015-05-12T00:33:36.000Z</published>
    <updated>2015-09-27T16:48:58.875Z</updated>
    <content type="html"><![CDATA[<p>Welcome to <a href="http://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="http://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="http://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.</p>
<a id="more"></a>
<h2 id="Quick_Start">Quick Start</h2><h3 id="Create_a_new_post">Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure>
<p>More info: <a href="http://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p>
<h3 id="Run_server">Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>
<p>More info: <a href="http://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p>
<h3 id="Generate_static_files">Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>
<p>More info: <a href="http://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p>
<h3 id="Deploy_to_remote_sites">Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>
<p>More info: <a href="http://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>Welcome to <a href="http://hexo.io/">Hexo</a>! This is your very first post. Check <a href="http://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="http://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>]]>
    
    </summary>
    
      <category term="hexo" scheme="http://yoursite.com/tags/hexo/"/>
    
      <category term="Hexo" scheme="http://yoursite.com/categories/Hexo/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[chapter15-字符串散列表]]></title>
    <link href="http://yoursite.com/2015/03/12/chapter15/"/>
    <id>http://yoursite.com/2015/03/12/chapter15/</id>
    <published>2015-03-12T13:06:53.000Z</published>
    <updated>2016-04-14T17:35:50.155Z</updated>
    <content type="html"><![CDATA[<blockquote>
<p>实现一个散列表存储《圣经》中的单词，共有29131个不同的单词。</p>
</blockquote>
<p>散列表是数组+链表的形式，我们需要一个字符串哈希函数，将不同的单词尽可能映射到数组中不同的位置，如果产生了哈希冲突，采用拉链法解决。</p>
<a id="more"></a>
<p>我们用跟29131最接近的质数29989作为散列表的大小，用31作为字符串哈希函数的乘数。</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">unsigned</span> <span class="keyword">int</span> <span class="title">hash</span><span class="params">(<span class="keyword">char</span> *p)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">int</span> h = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> ( ; *p; p++)</span><br><span class="line">        h = MULT * h + *p;</span><br><span class="line">    <span class="keyword">return</span> h % NHASH;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>增加单词时，先计算该字符串的哈希值，找到对应的数组中的位置，然后沿这个链表往下找，直到找到该单词，把它的count加一，或者没有找到，就新建一个结点初始化信息，把bin[h]设为它的next，最后把它设为bin[h]，也就是说它放在数组里，原来的链表往后挪<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">incword</span><span class="params">(<span class="keyword">char</span> *s)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> h = hash(s);<span class="comment">//先计算hash值</span></span><br><span class="line">    nodeptr p;</span><br><span class="line">    <span class="keyword">for</span> (p = bin[h]; p != NULL; p = p-&gt;next)<span class="comment">//在对应的链表上搜索</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">strcmp</span>(p-&gt;word, s) == <span class="number">0</span>) &#123;<span class="comment">//如果找到就更新count然后返回</span></span><br><span class="line">            (p-&gt;count)++;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    p = (nodeptr)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(node));<span class="comment">//没有找到就新建一个结点申请内存</span></span><br><span class="line">    p-&gt;count = <span class="number">1</span>;</span><br><span class="line">    p-&gt;word = (<span class="keyword">char</span>*)<span class="built_in">malloc</span>(<span class="built_in">strlen</span>(s) + <span class="number">1</span>);</span><br><span class="line">    <span class="built_in">strcpy</span>(p-&gt;word, s);</span><br><span class="line">    p-&gt;next = bin[h];<span class="comment">//把bin[h](也就是原来数组里的结点，可能有也可能为NULL)设为该结点的next</span></span><br><span class="line">    bin[h] = p;<span class="comment">//把该结点放到bin数组里</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>完整的程序：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor">#<span class="keyword">include</span>&lt;cstdio&gt;</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span>&lt;cstdlib&gt;</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span>&lt;cstring&gt;</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> NHASH 29989</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> MULT 31</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> node *nodeptr;</span><br><span class="line"><span class="keyword">struct</span> node</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">char</span> *word;</span><br><span class="line">    <span class="keyword">int</span> count;</span><br><span class="line">    nodeptr next;</span><br><span class="line">&#125;;</span><br><span class="line">nodeptr bin[NHASH];</span><br><span class="line"><span class="function"><span class="keyword">unsigned</span> <span class="keyword">int</span> <span class="title">hash</span><span class="params">(<span class="keyword">char</span> *p)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">int</span> h = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> ( ; *p; p++)</span><br><span class="line">        h = MULT * h + *p;</span><br><span class="line">    <span class="keyword">return</span> h % NHASH;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">incword</span><span class="params">(<span class="keyword">char</span> *s)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> h = hash(s);</span><br><span class="line">    nodeptr p;</span><br><span class="line">    <span class="keyword">for</span> (p = bin[h]; p != NULL; p = p-&gt;next)</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">strcmp</span>(p-&gt;word, s) == <span class="number">0</span>) &#123;</span><br><span class="line">            (p-&gt;count)++;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    p = (nodeptr)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(node));</span><br><span class="line">    p-&gt;count = <span class="number">1</span>;</span><br><span class="line">    p-&gt;word = (<span class="keyword">char</span>*)<span class="built_in">malloc</span>(<span class="built_in">strlen</span>(s) + <span class="number">1</span>);</span><br><span class="line">    <span class="built_in">strcpy</span>(p-&gt;word, s);</span><br><span class="line">    p-&gt;next = bin[h];</span><br><span class="line">    bin[h] = p;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    <span class="keyword">char</span> buf[<span class="number">50</span>];</span><br><span class="line">    nodeptr p;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; NHASH; i++) </span><br><span class="line">        bin[i] = NULL;</span><br><span class="line">    <span class="keyword">while</span> (~<span class="built_in">scanf</span>(<span class="string">"%s"</span>, buf))</span><br><span class="line">        incword(buf);</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; NHASH; i++) </span><br><span class="line">        <span class="keyword">for</span> (p = bin[i]; p != NULL; p = p-&gt;next)</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%s count=%d i=%d\n"</span>, p-&gt;word, p-&gt;count, i);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//输入：</span></span><br><span class="line"><span class="comment">//ask not what your country can do for you</span></span><br><span class="line"><span class="comment">//but what you can do for your country</span></span><br><span class="line"><span class="comment">//^Z</span></span><br><span class="line"><span class="comment">//输出：</span></span><br><span class="line"><span class="comment">//do count=2 i=3211</span></span><br><span class="line"><span class="comment">//ask count=1 i=6922</span></span><br><span class="line"><span class="comment">//but count=1 i=7954</span></span><br><span class="line"><span class="comment">//can count=2 i=8289</span></span><br><span class="line"><span class="comment">//for count=2 i=11610</span></span><br><span class="line"><span class="comment">//country count=2 i=12391</span></span><br><span class="line"><span class="comment">//not count=1 i=19300</span></span><br><span class="line"><span class="comment">//what count=2 i=19527</span></span><br><span class="line"><span class="comment">//your count=2 i=26476</span></span><br><span class="line"><span class="comment">//you count=2 i=29872</span></span><br></pre></td></tr></table></figure></p>
]]></content>
    <summary type="html">
    <![CDATA[<blockquote>
<p>实现一个散列表存储《圣经》中的单词，共有29131个不同的单词。</p>
</blockquote>
<p>散列表是数组+链表的形式，我们需要一个字符串哈希函数，将不同的单词尽可能映射到数组中不同的位置，如果产生了哈希冲突，采用拉链法解决。</p>]]>
    
    </summary>
    
      <category term="编程珠玑" scheme="http://yoursite.com/categories/%E7%BC%96%E7%A8%8B%E7%8F%A0%E7%8E%91/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[chapter14-堆、优先队列]]></title>
    <link href="http://yoursite.com/2015/03/11/chapter14/"/>
    <id>http://yoursite.com/2015/03/11/chapter14/</id>
    <published>2015-03-11T13:06:53.000Z</published>
    <updated>2016-04-14T17:35:41.168Z</updated>
    <content type="html"><![CDATA[<h1 id="堆排序">堆排序</h1><p>主要是几个函数：</p>
<ul>
<li><code>pushdown(int rt, int n)</code>表示对rt结点向下调整，n为堆的大小</li>
<li><code>pullup(int rt)</code>表示对rt结点向上调整</li>
<li><code>build(int n)</code>建堆过程</li>
<li><code>heapSort(int n)</code>堆排序函数</li>
</ul>
<a id="more"></a>
<p>pushdown的非递归形式：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">pushdown</span><span class="params">(<span class="keyword">int</span> rt, <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> t, max;</span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>) &#123;</span><br><span class="line">        max = rt;<span class="comment">//先把当前结点赋给max</span></span><br><span class="line">        <span class="keyword">if</span> ((rt &lt;&lt; <span class="number">1</span>) &lt;= n &amp;&amp; x[rt &lt;&lt; <span class="number">1</span>] &lt; x[rt]) max = rt &lt;&lt; <span class="number">1</span>;<span class="comment">//如果左孩子存在且值比当前结点小 更新max</span></span><br><span class="line">        <span class="keyword">if</span> ((rt &lt;&lt; <span class="number">1</span> | <span class="number">1</span>) &lt;= n &amp;&amp; x[rt &lt;&lt; <span class="number">1</span> | <span class="number">1</span>] &lt; x[max]) max = rt &lt;&lt; <span class="number">1</span> | <span class="number">1</span>;<span class="comment">//如果左孩子存在且值比当前max结点小 更新max</span></span><br><span class="line">        <span class="keyword">if</span> (max != rt) &#123;<span class="comment">//如果max！=rt说明存在一个左右孩子更小</span></span><br><span class="line">            t = x[max]; x[max] = x[rt]; x[rt] = t;</span><br><span class="line">            rt = max;<span class="comment">//把该左或右孩子赋给rt继续向下调整</span></span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">break</span>;<span class="comment">//说明没有比它小的左右孩子，不需要向下调整了</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>pullup的非递归形式：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">pullup</span><span class="params">(<span class="keyword">int</span> rt)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> t = <span class="number">0</span>, tmp;</span><br><span class="line">    <span class="keyword">while</span> (rt &gt; <span class="number">1</span> &amp;&amp; t != rt) &#123;<span class="comment">//如果t!=rt说明调整了则继续向上调整</span></span><br><span class="line">        t = rt;<span class="comment">//t保存当前结点</span></span><br><span class="line">        <span class="keyword">if</span> (x[rt] &lt; x[rt &gt;&gt; <span class="number">1</span>]) &#123;</span><br><span class="line">            tmp = x[rt]; x[rt] = x[rt &gt;&gt; <span class="number">1</span>]; x[rt &gt;&gt; <span class="number">1</span>] = tmp;</span><br><span class="line">            rt &gt;&gt;= <span class="number">1</span>;<span class="comment">//更新当前结点</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>build建堆过程，从第n/2个结点倒着更新到第1个结点，因为堆中标号为1~n/2的结点才有孩子结点，必须要倒着更新，否则可能不满足堆的性质<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    <span class="keyword">for</span> (i = n &gt;&gt; <span class="number">1</span>; i &gt; <span class="number">0</span>; i--)<span class="comment">//倒着更新</span></span><br><span class="line">        pushdown(i, n);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>或者这样也可以用pullup<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">build2</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">int</span> i;</span><br><span class="line">	<span class="keyword">for</span> (i = <span class="number">2</span>; i &lt;= n; i++)</span><br><span class="line">		pullup(i);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>heapSort堆排序，每次都把x[1]和堆中最后一个元素交换，堆的大小减1，然后对结点1向下调整使其满足堆的性质，这样小根堆得到的是降序序列，大根堆得到的是升序序列<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">heapSort</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i, t;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; n - <span class="number">1</span>; i++) &#123;<span class="comment">//这里只需要n-1轮遍历，因为n-1轮之后堆的大小只剩1，就不用交换了</span></span><br><span class="line">        t = x[<span class="number">1</span>]; x[<span class="number">1</span>] = x[n - i]; x[n - i] = t;</span><br><span class="line">        pushdown(<span class="number">1</span>, n - i - <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>测试程序：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> x[] = &#123;<span class="number">3</span>, -<span class="number">5</span>, <span class="number">8</span>, <span class="number">7</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">9</span>, <span class="number">16</span>&#125;;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    build(<span class="number">8</span>);</span><br><span class="line">    heapSort(<span class="number">8</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; <span class="number">9</span>; i++)<span class="comment">//x[0]没参与排序这里只对x[1-8]排序</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d "</span>, x[i]);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//运行结果：这里建的小根堆所以降序输出</span></span><br><span class="line"><span class="comment">//16 9 8 7 2 0 0 -5</span></span><br></pre></td></tr></table></figure></p>
<p>复杂度：每次调整需$O(logn)$，共调整n次，复杂度$O(nlogn)$</p>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="堆排序">堆排序</h1><p>主要是几个函数：</p>
<ul>
<li><code>pushdown(int rt, int n)</code>表示对rt结点向下调整，n为堆的大小</li>
<li><code>pullup(int rt)</code>表示对rt结点向上调整</li>
<li><code>build(int n)</code>建堆过程</li>
<li><code>heapSort(int n)</code>堆排序函数</li>
</ul>]]>
    
    </summary>
    
      <category term="编程珠玑" scheme="http://yoursite.com/categories/%E7%BC%96%E7%A8%8B%E7%8F%A0%E7%8E%91/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[chapter12-随机数，取样]]></title>
    <link href="http://yoursite.com/2015/03/10/chapter12/"/>
    <id>http://yoursite.com/2015/03/10/chapter12/</id>
    <published>2015-03-10T13:06:53.000Z</published>
    <updated>2016-04-14T17:35:32.717Z</updated>
    <content type="html"><![CDATA[<blockquote>
<p>Q1：从0~n-1这n个数中随机选出不重复的m个数并按序输出。</p>
</blockquote>
<p>首先我们应该知道概率事件的计算机表示：<br>如果一个事件A发生的概率为$\frac{m}{n}$，那么用编程语言表示就是：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (bigrand() % n &lt; m)</span><br><span class="line">	<span class="keyword">do</span> A;</span><br></pre></td></tr></table></figure></p>
<a id="more"></a>
<p>那么现在考虑这个问题，选择0的时候，我们以$\frac{m}{n}$的概率选择0，这是毫无疑问的；<br>选择1的时候，如果前面选了0，那么我们要以$\frac{m-1}{n-1}$的概率选择1，如果没有选择0，那么我们以$\frac{m}{n-1}$的概率选择1。<br>也就是说，还需要选的元素个数我们记为select，从remaining个元素进行选择，那么选择的概率为$\frac{select}{remaining}$<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> i, n, m;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">	<span class="keyword">if</span> (bigrand() % (n - i) &lt; m) &#123;<span class="comment">//n-i是当前剩余总元素数，m为当前还需要选的元素个数</span></span><br><span class="line">		print i;</span><br><span class="line">		m--;<span class="comment">//如果选择了当前元素，则remaining--</span></span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure></p>
<p>因为按照i=[0,n-1]这样的顺序遍历了数组，所以最终输出的肯定是有序的，复杂度为$O(n)$，而且每次都是以$\frac{select}{remaining}$的概率选择当前元素，所以每个元素被选中的概率相等。<br>那么现在还剩下最后一个问题：该算法会准确的输出m个元素吗？<br>答案是肯定的。我们可以这样分析：如果已经选择了m个元素，那么m=0，if括号中的条件恒为假，剩下的元素肯定不会被选择，所以肯定不会多选；如果当n-i == m的时候，还没有选满，那么if中的条件恒为真，剩下的所有元素都会被选择，所以也不会少选。举个例子，n=400，m=20，假设前面380个数都没有被选择，那么到了倒数第20个数，n-i = 20，m=20，剩下的20个数都会被选择。</p>
<p>另一种方法是，将n个数随即打乱，然后取前m个数，再排序输出<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">	swap(i, randint(i, n - <span class="number">1</span>));</span><br><span class="line">sort(x, x + m);</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; m; i++)</span><br><span class="line">	print x[i]</span><br></pre></td></tr></table></figure></p>
<p>这样的复杂度为$O(n + mlogm)$，注意其中的交换函数</p>
<p>还有一种解决方案是用set，每次随机从0~n-1中选一个数放入set，直到set的size达到m。由于set每次插入的复杂度为$O(logm)$，所以总复杂度为$O(mlogm)$<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">set</span>&lt;<span class="keyword">int</span>&gt; s;</span><br><span class="line"><span class="keyword">while</span> (s.size() &lt; m)</span><br><span class="line">	s.insert(bigrand() % n);</span><br><span class="line"><span class="built_in">set</span>&lt;<span class="keyword">int</span>&gt;::iterator it;</span><br><span class="line"><span class="keyword">for</span> (it = s.begin(); it != s.end(); it++)</span><br><span class="line">	print *it</span><br></pre></td></tr></table></figure></p>
<p>但是这样有一点问题，就是当m和n比较接近的时候，越到后面重复的概率越高，会产生很多次浪费，一个改进的算法是：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">set</span>&lt;<span class="keyword">int</span>&gt; s;</span><br><span class="line"><span class="built_in">set</span>&lt;<span class="keyword">int</span>&gt;::iterator it;</span><br><span class="line"><span class="keyword">int</span> j, t;</span><br><span class="line"><span class="keyword">for</span> (j = n- m; j &lt; n; j++) &#123;</span><br><span class="line">	t = bigrand() % (j + <span class="number">1</span>);</span><br><span class="line">	<span class="keyword">if</span> (s.find(t) == s.end())</span><br><span class="line">		s.insert(t);<span class="comment">// t not in s</span></span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">		s.insert(j);<span class="comment">// t in s</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (it = s.begin(); it != s.end(); it++)</span><br><span class="line">	print *it</span><br></pre></td></tr></table></figure></p>
<blockquote>
<p>Q2：rand7() 到 rand5()、rand10()</p>
</blockquote>
<p>rand7()能随机返回1-7这7个整数中的一个，根据rand7()编写对应的rand5()和rand10()。<br>rand5()比较简单<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">rand5</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="keyword">int</span> res;</span><br><span class="line">	<span class="keyword">do</span> &#123;</span><br><span class="line">		res = rand7();</span><br><span class="line">	&#125; <span class="keyword">while</span> (res &gt;= <span class="number">6</span>);<span class="comment">//取出来6或者7就重取，1-5的概率是相等的</span></span><br><span class="line">	<span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>rand10()稍微复杂一点：rand5()可以等概率返回1-5，那么rand5() + 5可以等概率返回6-10，把它们视为两个整体，现在只需要等概率返回这两个整体即可。<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">rand5</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="keyword">int</span> res, t;</span><br><span class="line">	<span class="keyword">do</span> &#123;</span><br><span class="line">		res = rand7();</span><br><span class="line">	&#125; <span class="keyword">while</span> (res &gt;= <span class="number">6</span>);<span class="comment">//取出来6或者7就重取，1-5的概率是相等的</span></span><br><span class="line">	<span class="comment">//做一个1/2的概率生成器，最简单的利用奇偶性</span></span><br><span class="line">	<span class="keyword">do</span> &#123;</span><br><span class="line">		t = rand7();</span><br><span class="line">	&#125; <span class="keyword">while</span> (res == <span class="number">7</span>);<span class="comment">//t为1-6，奇偶数相同各3个</span></span><br><span class="line">	res += <span class="number">5</span> * (t &amp; <span class="number">1</span>);<span class="comment">//t为0或1，即res有1/2的概率+5</span></span><br><span class="line">	<span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<blockquote>
<p>Q3：赠券收集者问题</p>
</blockquote>
<p>一套卡片总共有n张，分别是n种类型，这里假定每种类型卡片数量相等（被取到的概率一致），问收集齐整套卡片需要多少张卡片？</p>
<p>首先，买第一种卡片，这张肯定是原来没有的，概率为1；（这里第一种不是指0~n-1中的第0种，而是你收集的卡片的第一种，下同）<br>买第二种卡片时候，不能跟第一次重复，概率为$\frac{n-1}{n}$<br>买第三种，不能跟前两次重复，概率为$\frac{n-2}{n}$<br>…<br>买第n种，不能跟前面n-1种重复，概率为$\frac{1}{n}$<br>亦即$p_i = \frac{n + 1 - i}{n}$，而期望$E_i = \frac{1}{p_i} = \frac{n}{n + 1 - i}$<br>则$$sum = \sum_{i = 1}^n E_i = n (1 + \frac{1}{2} + \frac{1}{3} + \cdots +\frac{1}{n})$$<br>后面那一堆是调和级数，是发散的，和大约为<br>$ln(n + 1) + r \ (r \approx 0.5772156649)$<br>所以总和$sum \approx nlnn$</p>
]]></content>
    <summary type="html">
    <![CDATA[<blockquote>
<p>Q1：从0~n-1这n个数中随机选出不重复的m个数并按序输出。</p>
</blockquote>
<p>首先我们应该知道概率事件的计算机表示：<br>如果一个事件A发生的概率为$\frac{m}{n}$，那么用编程语言表示就是：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (bigrand() % n &lt; m)</span><br><span class="line">	<span class="keyword">do</span> A;</span><br></pre></td></tr></table></figure></p>]]>
    
    </summary>
    
      <category term="编程珠玑" scheme="http://yoursite.com/categories/%E7%BC%96%E7%A8%8B%E7%8F%A0%E7%8E%91/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[chapter11-插入排序、快排]]></title>
    <link href="http://yoursite.com/2015/03/09/chapter11/"/>
    <id>http://yoursite.com/2015/03/09/chapter11/</id>
    <published>2015-03-09T13:06:53.000Z</published>
    <updated>2016-04-14T17:35:24.426Z</updated>
    <content type="html"><![CDATA[<h1 id="插入排序">插入排序</h1><p>思路：给定一个数组x[0,n)，我们先把x[0…0]视为有序序列，插入x[1]，然后把x[0…1]视为有序序列，插入x[2]，…，最后把x[0…n-2]视为有序序列，插入x[n-1]。</p>
<a id="more"></a>
<p>复杂度：共需从x[1]到x[n-1] (n-1)趟插入，每次插入需要移动的距离为O(n)，所以最终复杂度为$O(n^2)$ 空间上只需要O(1)的交换元素空间，是原地排序</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">insertSort</span><span class="params">(<span class="keyword">int</span> x[], <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i, j, t;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt; n; i++)<span class="comment">//将x[1]到x[n-1]依次插入</span></span><br><span class="line">        <span class="keyword">for</span> (j = i; j &gt; <span class="number">0</span> &amp;&amp; x[j] &lt; x[j - <span class="number">1</span>]; j--) &#123;</span><br><span class="line">	        <span class="comment">//如果该元素比它前面的小，就交换，直到它找到自己在前面序列的位置</span></span><br><span class="line">            t = x[j]; x[j] = x[j - <span class="number">1</span>]; x[j - <span class="number">1</span>] = t;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>可以看出插入排序的主要时间都耗费在了内层循环元素的移动上，如果原本数组就是有序的，那么O(n)时间就完成了。因此在元素<strong>基本有序</strong>的情况下，插入排序的效率是比较高的。</p>
<h1 id="快排">快排</h1><p>思路：快排的思想是对于一个数组x[l,r]，从中随机选取一个元素x[k]，然后把x中小于x[k]的元素都移到左边，大于等于x[k]的元素都移到右边，最终x[k]被移到了m位置，这样x[l,m-1]都小于x[m]，x[m+1,r]都大于等于x[m]。<br>接下来对于x[l,m-1]和x[m+1,r]再递归去排序，直到l&gt;=u证明数组中只有一个元素或没有元素则返回。</p>
<p>复杂度：每次选完枢轴元素之后移动的次数为O(n)，之后分治，最坏情况下一端为空，另一端为n-1，这样最坏也是O(n)，所以最坏情况下复杂度为$O(n^2)$ 平均情况下为$O(nlogn)$ 空间上，程序本身没有申请新的空间，但是运行时平均需要$O(logn)$的栈空间，最坏需要$O(n)$的栈空间<br>$$<br>T(n) = 2T(\frac{n}{2}) + O(n) \<br>n^{log_b^a} = n^{log_2^2} = n = f(n) = O(n) \<br>T(n) = O(n^{log_b^a}logn) = O(nlogn)<br>$$</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">qsort</span><span class="params">(<span class="keyword">int</span> x[], <span class="keyword">int</span> l, <span class="keyword">int</span> r)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (l &gt;= r) <span class="keyword">return</span>; <span class="comment">//递归出口</span></span><br><span class="line">    <span class="keyword">int</span> i, m, t;</span><br><span class="line">    m = l;<span class="comment">//选取最左边的作为枢轴</span></span><br><span class="line">    <span class="keyword">for</span> (i = l + <span class="number">1</span>; i &lt;= r; i++)<span class="comment">//依次将后面的值与枢轴进行比较</span></span><br><span class="line">        <span class="keyword">if</span> (x[i] &lt; x[l]) &#123;<span class="comment">//如果比枢轴小 swap(++m, i); m存的是小于x[l]的元素的个数</span></span><br><span class="line">            t = x[++m]; x[m] = x[i]; x[i] = t;</span><br><span class="line">        &#125;</span><br><span class="line">    t = x[m]; x[m] = x[l]; x[l] = t;<span class="comment">//最终swap(l,m);</span></span><br><span class="line">    qsort(x, l, m - <span class="number">1</span>);</span><br><span class="line">    qsort(x, m + <span class="number">1</span>, r);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>每次都把x[m]“删除”了，所以肯定会终止。</p>
<p>几点改进：</p>
<ul>
<li>从单向搜索改为双向搜索</li>
<li>每次随机选取元素作为枢轴而不是最左边的</li>
<li>对于小数组使用插入排序直接返回</li>
</ul>
<p>使用双向搜索，原来只是每次从前面找比枢轴小的，现在从前面找到第一个大于等于枢轴的，从后面找到第一个小于等于枢轴的，交换它们的值，直到这两个指针相遇<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor">#<span class="keyword">include</span>&lt;cstdio&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">qsort</span><span class="params">(<span class="keyword">int</span> x[], <span class="keyword">int</span> l, <span class="keyword">int</span> r)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (l &gt;= r) <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">int</span> i, j, t;</span><br><span class="line">    i = l; j = r + <span class="number">1</span>; <span class="comment">//注意i、j的初始化</span></span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">do</span> &#123;<span class="comment">//为什么写成do while形式？因为交换完x[i]、x[j]的值，都要让i、j往前走一步，否则数组中有两个跟枢轴相等的，就死循环了</span></span><br><span class="line">            i++;</span><br><span class="line">        &#125; <span class="keyword">while</span> (i &lt;= r &amp;&amp; x[i] &lt; x[l]);<span class="comment">//找到第一个大于等于x[l]</span></span><br><span class="line">        <span class="keyword">do</span> &#123;</span><br><span class="line">            j--;</span><br><span class="line">        &#125; <span class="keyword">while</span> (x[j] &gt; x[l]);<span class="comment">//找到第一个小于等于x[l]</span></span><br><span class="line">        <span class="keyword">if</span> (i &gt; j) <span class="keyword">break</span>;<span class="comment">//如果i、j相遇了就说明遍历完了，此时就不用swap(i,j)了</span></span><br><span class="line">        t = x[i]; x[i] = x[j]; x[j] = t;<span class="comment">//swap(i,j)</span></span><br><span class="line">    &#125;</span><br><span class="line">    t = x[l]; x[l] = x[j]; x[j] = t;</span><br><span class="line">    qsort(x, l, j - <span class="number">1</span>);</span><br><span class="line">    qsort(x, j + <span class="number">1</span>, r);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>每次随机选取一个元素做枢轴，方法就是swap(l, randint(l, u));<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">bigrand</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> RAND_MAX * rand() + rand();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">randint</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> l + bigrand() % (r - l + <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">qsort</span><span class="params">(<span class="keyword">int</span> x[], <span class="keyword">int</span> l, <span class="keyword">int</span> r)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (l &gt;= r) <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">int</span> i, j, t;</span><br><span class="line">    i = randint(l, r);</span><br><span class="line">    t = x[i]; x[i] = x[l]; x[l] = t;<span class="comment">//先随机找一个数与x[l]交换</span></span><br><span class="line">    i = l; j = r + <span class="number">1</span>; </span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>快排的很多时间都浪费在了对小数组的元素移动上，我们可以规定当l与u的差在一定范围内时，采用插入排序并返回。或者直接返回，最后再对整个数组做一次插入排序<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">qsort</span><span class="params">(<span class="keyword">int</span> x[], <span class="keyword">int</span> l, <span class="keyword">int</span> r)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (r - l &lt; cutoff) <span class="keyword">return</span>;<span class="comment">//cutoff一般可取30到50</span></span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">&#125;<span class="comment">//此时数组并不是有序的 而是某些小片段整体小于它右边小片段这样的形式</span></span><br><span class="line">insertSort(x, n);<span class="comment">//调用一次插入排序对基本有序的数组进行排序</span></span><br></pre></td></tr></table></figure></p>
<p>完整的一份代码如下：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor">#<span class="keyword">include</span>&lt;cstdio&gt;</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span>&lt;cstdlib&gt; </span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span>&lt;ctime&gt;</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> cutoff 4</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">insertSort</span><span class="params">(<span class="keyword">int</span> x[], <span class="keyword">int</span> n)</span> </span>&#123;<span class="comment">//这里为了看到效果我把cutoff设为4</span></span><br><span class="line">    <span class="keyword">int</span> i, j, t;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt; n; i++)</span><br><span class="line">        <span class="keyword">for</span> (j = i; j &gt; <span class="number">0</span> &amp;&amp; x[j] &lt; x[j - <span class="number">1</span>]; j--) &#123;</span><br><span class="line">            t = x[j]; x[j] = x[j - <span class="number">1</span>]; x[j - <span class="number">1</span>] = t;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">bigrand</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> RAND_MAX * rand() + rand();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">randint</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> l + bigrand() % (r - l + <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">qsort</span><span class="params">(<span class="keyword">int</span> x[], <span class="keyword">int</span> l, <span class="keyword">int</span> r)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (r - l &lt; cutoff) <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">int</span> i, j, t;</span><br><span class="line">    i = randint(l, r);</span><br><span class="line">    t = x[i]; x[i] = x[l]; x[l] = t;</span><br><span class="line">    i = l; j = r + <span class="number">1</span>; </span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">do</span> &#123;</span><br><span class="line">            i++;</span><br><span class="line">        &#125; <span class="keyword">while</span> (i &lt;= r &amp;&amp; x[i] &lt; x[l]);</span><br><span class="line">        <span class="keyword">do</span> &#123;</span><br><span class="line">            j--;</span><br><span class="line">        &#125; <span class="keyword">while</span> (x[j] &gt; x[l]);</span><br><span class="line">        <span class="keyword">if</span> (i &gt; j) <span class="keyword">break</span>;</span><br><span class="line">        t = x[i]; x[i] = x[j]; x[j] = t;</span><br><span class="line">    &#125;</span><br><span class="line">    t = x[l]; x[l] = x[j]; x[j] = t;</span><br><span class="line">    qsort(x, l, j - <span class="number">1</span>);</span><br><span class="line">    qsort(x, j + <span class="number">1</span>, r);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    srand((<span class="keyword">unsigned</span>)time(NULL));<span class="comment">//种子生成器，否则rand()一直不变</span></span><br><span class="line">    <span class="keyword">int</span> x[] = &#123;<span class="number">0</span>, -<span class="number">5</span>, <span class="number">8</span>, <span class="number">7</span>, <span class="number">3</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">9</span>, <span class="number">16</span>&#125;;</span><br><span class="line">    qsort(x, <span class="number">0</span>, <span class="number">8</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">9</span>; i++)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d "</span>, x[i]);<span class="comment">//可以看出调用完qsort数组并不是有序的</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">    insertSort(x, <span class="number">9</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">9</span>; i++)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d "</span>, x[i]);<span class="comment">//最终数组有序</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//运行结果：</span></span><br><span class="line"><span class="comment">//-5 0 2 7 3 3 8 9 16</span></span><br><span class="line"><span class="comment">//-5 0 2 3 3 7 8 9 16</span></span><br></pre></td></tr></table></figure></p>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="插入排序">插入排序</h1><p>思路：给定一个数组x[0,n)，我们先把x[0…0]视为有序序列，插入x[1]，然后把x[0…1]视为有序序列，插入x[2]，…，最后把x[0…n-2]视为有序序列，插入x[n-1]。</p>]]>
    
    </summary>
    
      <category term="编程珠玑" scheme="http://yoursite.com/categories/%E7%BC%96%E7%A8%8B%E7%8F%A0%E7%8E%91/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[chapter6-10-估算，最大子向量和，最大子矩阵和，变进制表示]]></title>
    <link href="http://yoursite.com/2015/03/08/chapter6-10/"/>
    <id>http://yoursite.com/2015/03/08/chapter6-10/</id>
    <published>2015-03-08T13:06:53.000Z</published>
    <updated>2016-04-14T17:35:16.151Z</updated>
    <content type="html"><![CDATA[<blockquote>
<p>72法则</p>
</blockquote>
<p>假如以年利率r%投资一笔钱y年，那么当r * y = 72时，那么这笔钱差不多要翻倍。</p>
<p>6%增长率，12年后翻倍<br>8%增长率，9年后翻倍</p>
<p>当r在5%和10%之间，72法则的误差率小于1%</p>
<a id="more"></a>
<blockquote>
<p>给出一个n维向量，找出它的一个子向量x[i…j]，令其中元素的和最大</p>
</blockquote>
<p>比较经典的问题了，直接给最优$O(n)$的算法吧<br>在九度上找了个题写了下，这题要求输出最大和，还有左右下标，存在多个时候，输出起点下标最小那个<br><a href="http://ac.jobdu.com/problem.php?pid=1372" target="_blank" rel="external">http://ac.jobdu.com/problem.php?pid=1372</a><br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor">#<span class="keyword">include</span>&lt;cstdio&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> x, i, ans, t, n, l, r, nl;<span class="comment">//不用保存整个数组，在线处理即可</span></span><br><span class="line">    <span class="keyword">while</span> (~<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n) &amp;&amp; n) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;x);<span class="comment">//先读取数组第一个数</span></span><br><span class="line">        ans = t = x;<span class="comment">//ans最大值，t当前向量和</span></span><br><span class="line">        l = nl = r = <span class="number">0</span>;<span class="comment">//l，r分别为最终左右下标，nl为当前最大和向量左下标，i为当前右坐标</span></span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;x);</span><br><span class="line">            <span class="keyword">if</span> (t &gt;= <span class="number">0</span>) <span class="comment">//如果当前值非负，就不切换左起点，注意等号，因为要输出左起点最小那个</span></span><br><span class="line">                t += x;</span><br><span class="line">            <span class="keyword">else</span> &#123;<span class="comment">//否则，就必须切换左起点</span></span><br><span class="line">                t = x;</span><br><span class="line">                nl = i;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (t &gt; ans) &#123;<span class="comment">//如果比最大值大，那么将信息保存</span></span><br><span class="line">                l = nl;</span><br><span class="line">                r = i;</span><br><span class="line">                ans = t;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d %d %d\n"</span>, ans, l, r);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<blockquote>
<p>最大子矩阵和：一个m * n的矩阵，找出一个子矩阵，使其和最大</p>
</blockquote>
<p>这道题从最大子段和演变而来，首先暴力的思路是遍历所有的子矩阵，这样的子矩阵个数为$\frac{m<em>(m+1)}{2}</em>\frac{n*(n+1)}{2}$，也就是说复杂度为$O(m^2n^2)$，我们需要一种更好的方法。</p>
<p>思路：</p>
<ul>
<li>考虑m = 1的情况，这时问题退化为最大子段和；</li>
<li>m = 2，我们可以对第一行和第二行分别求最大子段和，然后把两行相加为一行，求该行的最大子段和，其中最大的那个就是答案；</li>
<li>m = 3，我们可以对1、2、3行求…，然后对1 + 2， 2 + 3， 1 + 3求…，最后对1 + 2 + 3求最大子段和。</li>
<li>…</li>
<li>发现规律了没，我们只要对$\frac{m*(m+1)}{2}$个n维向量求最大子段和即可。</li>
</ul>
<p>问题转化为：遍历$O(m^2)$个n维向量，分别求最大子段和$O(n)$，总复杂度为$O(m^2n)$<br>其中计算第i行到第j行的对应列元素和的复杂度为$O(n)$，而不是$O(mn)$，比如m = 3，按照1、1 + 2、1 + 2 + 3、2、2 + 3、3这样的顺序，在求1 + 2 + 3时，只要利用1 + 2的结果，就可以在$O(n)$内完成，而不用从1开始重新加起。</p>
<p>POJ这道题是n * n的矩阵，复杂度$O(n^3)$<br><a href="http://poj.org/problem?id=1050" target="_blank" rel="external">http://poj.org/problem?id=1050</a></p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor">#<span class="keyword">include</span>&lt;cstdio&gt;</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> N 105</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n, i, j, k, ans, tmp;</span><br><span class="line">    <span class="keyword">int</span> x[N][N], s[N];<span class="comment">//s就是那个加和之后的n维向量</span></span><br><span class="line">    <span class="keyword">while</span> (~<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n)) &#123;</span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; n; i++)<span class="comment">//读取矩阵</span></span><br><span class="line">            <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; n; j++)</span><br><span class="line">                <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;x[i][j]);</span><br><span class="line">        ans = x[<span class="number">0</span>][<span class="number">0</span>];<span class="comment">//先把最大值置为x[0][0]</span></span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; n; i++) &#123;<span class="comment">//如果是m行，则i，j的上限为m</span></span><br><span class="line">            <span class="keyword">for</span> (k = <span class="number">0</span>; k &lt; n; k++)</span><br><span class="line">                s[k] = <span class="number">0</span>;<span class="comment">//把n维向量置为0，准备加第i行到第j行的向量</span></span><br><span class="line">            <span class="keyword">for</span> (j = i; j &lt; n; j++) &#123;<span class="comment">//如果是m行，这里改为m</span></span><br><span class="line">                <span class="keyword">for</span> (k = <span class="number">0</span>; k &lt; n; k++) &#123;<span class="comment">//k是按列相加</span></span><br><span class="line">                    s[k] += x[j][k];</span><br><span class="line">                &#125;<span class="comment">//可以看到求和顺序为0、0 + 1、0 + 2... 0 + (m - 1)、1、1 + 2、...、(m - 2)、(m - 2) + (m - 1)、(m - 1)</span></span><br><span class="line">                tmp = s[<span class="number">0</span>];<span class="comment">//之后求最大子段和</span></span><br><span class="line">                <span class="keyword">for</span> (k = <span class="number">1</span>; k &lt; n; k++) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (tmp &lt; <span class="number">0</span>) tmp = s[k];</span><br><span class="line">                    <span class="keyword">else</span> tmp += s[k];</span><br><span class="line">                    <span class="keyword">if</span> (tmp &gt; ans) ans = tmp;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ans);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>空间压缩，变进制表示法</p>
</blockquote>
]]></content>
    <summary type="html">
    <![CDATA[<blockquote>
<p>72法则</p>
</blockquote>
<p>假如以年利率r%投资一笔钱y年，那么当r * y = 72时，那么这笔钱差不多要翻倍。</p>
<p>6%增长率，12年后翻倍<br>8%增长率，9年后翻倍</p>
<p>当r在5%和10%之间，72法则的误差率小于1%</p>]]>
    
    </summary>
    
      <category term="编程珠玑" scheme="http://yoursite.com/categories/%E7%BC%96%E7%A8%8B%E7%8F%A0%E7%8E%91/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[chapter345-3x+1，黑白球，日期函数，程序计时]]></title>
    <link href="http://yoursite.com/2015/03/07/chapter345/"/>
    <id>http://yoursite.com/2015/03/07/chapter345/</id>
    <published>2015-03-07T13:06:53.000Z</published>
    <updated>2016-04-14T17:36:03.280Z</updated>
    <content type="html"><![CDATA[<blockquote>
<p>Q1：x为一个正整数，若x是偶数，则x = x / 2；若x为奇数（&gt;1的奇数），则x = 3x + 1；则最终x为1</p>
</blockquote>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> (x != <span class="number">1</span>) &#123;</span><br><span class="line">	<span class="keyword">if</span> (even(x))</span><br><span class="line">		x = x / <span class="number">2</span>;</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">		x = <span class="number">3</span> * x + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<p>这个程序会终止，证明？</p>
<blockquote>
<p>Q2：一个罐子里有黑白豆，每次取两个，若为同色，就扔掉并再放一个黑球，若异色，就都扔掉再放一个白的。证明该过程会终止，并求最终球的颜色。</p>
</blockquote>
<ul>
<li>黑黑 -2黑 +1黑</li>
<li>白白 -2白 +1黑</li>
<li>黑白 白黑 -黑白 + 1白</li>
</ul>
<p>每次都是扔两个，放一个，所以最终肯定会剩一个球终止。<br>白球每次不是-0个，就是-2个，也就是说白球数的奇偶性保持不变，只有在最后剩黑白的情况下，才会剩白的，也就是说：<br>如果原来白球是奇数个，那剩的就是白的，否则剩的就是黑的</p>
<blockquote>
<p>Q3：给定两个日期，求他们之间的天数；给定一个日期，求星期几；</p>
</blockquote>
<p>。</p>
<blockquote>
<p>Q4：程序计时</p>
</blockquote>
<p>用到<time.h>中的函数</time.h></p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor">#<span class="keyword">include</span>&lt;cstdio&gt;</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span>&lt;ctime&gt;</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> N 1e5</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    clock_t start, end;</span><br><span class="line">    <span class="keyword">int</span> i, j;</span><br><span class="line">    start = clock();</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; N; i++)</span><br><span class="line">    	<span class="keyword">for</span> (j = <span class="number">1</span>; j &lt; N; j++)</span><br><span class="line">    		;</span><br><span class="line">    end = clock();</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%lf\n"</span>, (<span class="keyword">double</span>)(end - start) / CLOCKS_PER_SEC);</span><br><span class="line">    start = clock();</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; N; i++)</span><br><span class="line">    	<span class="keyword">for</span> (j = <span class="number">1</span>; j &lt; N; j &lt;&lt;= <span class="number">1</span>)</span><br><span class="line">    		;</span><br><span class="line">    end = clock();</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%lf\n"</span>, (<span class="keyword">double</span>)(end - start) / CLOCKS_PER_SEC);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//运行结果：</span></span><br><span class="line"><span class="comment">//24.493000</span></span><br><span class="line"><span class="comment">//0.003000</span></span><br><span class="line"><span class="comment">//可以看出当n=100000时，O(n^2)和O(nlogn)在性能上的巨大差别</span></span><br></pre></td></tr></table></figure>
]]></content>
    <summary type="html">
    <![CDATA[<blockquote>
<p>Q1：x为一个正整数，若x是偶数，则x = x / 2；若x为奇数（&gt;1的奇数），则x = 3x + 1；则最终x为1</p>
</blockquote>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> (x != <span class="number">1</span>) &#123;</span><br><span class="line">	<span class="keyword">if</span> (even(x))</span><br><span class="line">		x = x / <span class="number">2</span>;</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">		x = <span class="number">3</span> * x + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]>
    
    </summary>
    
      <category term="编程珠玑" scheme="http://yoursite.com/categories/%E7%BC%96%E7%A8%8B%E7%8F%A0%E7%8E%91/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[chapter2-翻转向量，变位词，第K大的元素]]></title>
    <link href="http://yoursite.com/2015/03/06/chapter2/"/>
    <id>http://yoursite.com/2015/03/06/chapter2/</id>
    <published>2015-03-06T13:06:53.000Z</published>
    <updated>2016-04-14T17:35:04.363Z</updated>
    <content type="html"><![CDATA[<blockquote>
<p>Q1：将一个n元一维向量向左旋转i个位置，也就是循环左移。例如：n=8，i=3时，abcdefgh翻转为defghabc。 </p>
</blockquote>
<a id="more"></a>
<p>思路：利用 $BA = (A^TB^T)^T$ 进行翻转即可。</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor">#<span class="keyword">include</span>&lt;cstdio&gt;</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span>&lt;cstring&gt;</span></span><br><span class="line"><span class="keyword">char</span> s[<span class="number">100</span>];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">reverse</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i = l, m = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">char</span> t;</span><br><span class="line">    <span class="keyword">for</span> (i = l; i &lt;= m; i++) &#123;</span><br><span class="line">        t = s[i]; s[i] = s[r - i + l]; s[r - i + l] = t;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n, i;</span><br><span class="line">    <span class="keyword">while</span> (~<span class="built_in">scanf</span>(<span class="string">"%s"</span>, s)) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;i);</span><br><span class="line">        n = <span class="built_in">strlen</span>(s);</span><br><span class="line">        reverse(<span class="number">0</span>, i - <span class="number">1</span>);</span><br><span class="line">        reverse(i, n - <span class="number">1</span>);</span><br><span class="line">        reverse(<span class="number">0</span>, n - <span class="number">1</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%s\n"</span>, s);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>那么转置一个m * n的矩阵呢？<br>也可以先按行互换，然后再按列互换，也是一种思路。</p>
<blockquote>
<p>Q2：变位词。有一个词典，其中“pots”、“stop”、“tops”互为变位词。给定一个词找出这个词在词典中的所有变位词。</p>
</blockquote>
<p>思路：先将词典中的每个单词排序，这样变位词都有一样的表示形式，比如上面三个词都可以表示为“opst”，然后将整个词典排序，新来一个词时，先求其标准形式，然后在词典中二分查找即可。</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor">#<span class="keyword">include</span>&lt;cstdio&gt;</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span>&lt;cstring&gt;</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span>&lt;algorithm&gt;</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">struct</span> word <span class="comment">//old放原词汇，str为排序后的标准形式</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">char</span> old[<span class="number">100</span>], str[<span class="number">100</span>];</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">vector</span>&lt;word&gt; dic;<span class="comment">//用vector做一个字典</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">cmp</span><span class="params">(word a, word b)</span> </span>&#123; <span class="comment">//按str标准形式排序</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">strcmp</span>(a.str, b.str) &lt; <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n, len, i;<span class="comment">//n:词典中的单词个数</span></span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</span><br><span class="line">    word w;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%s"</span>, w.old);</span><br><span class="line">        <span class="built_in">strcpy</span>(w.str, w.old);<span class="comment">//str = old</span></span><br><span class="line">        len = <span class="built_in">strlen</span>(w.str); </span><br><span class="line">        sort(w.str, w.str + len);<span class="comment">// 排序str</span></span><br><span class="line">        dic.push_back(w);<span class="comment">//加入词典</span></span><br><span class="line">    &#125;</span><br><span class="line">    sort(dic.begin(), dic.end(), cmp);<span class="comment">//对整个词典排序</span></span><br><span class="line">    <span class="built_in">vector</span>&lt;word&gt;::iterator l, r, k;</span><br><span class="line">    <span class="keyword">while</span> (~<span class="built_in">scanf</span>(<span class="string">"%s"</span>, w.old)) &#123;</span><br><span class="line">        len = <span class="built_in">strlen</span>(w.old);</span><br><span class="line">        <span class="built_in">strcpy</span>(w.str, w.old);</span><br><span class="line">        sort(w.str, w.str + len);<span class="comment">//找到其标准形式</span></span><br><span class="line">        l = lower_bound(dic.begin(), dic.end(), w, cmp);</span><br><span class="line">        r = upper_bound(dic.begin(), dic.end(), w, cmp);</span><br><span class="line">        <span class="keyword">for</span> (k = l; k != r; k++)</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%s\n"</span>, (*k).old);<span class="comment">//输出词典中的变位词</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>注意其中的两个函数，lower_bound(Iterator first, last, key, cmp) 和 upper_bound(Iterator first, last, key, cmp) 这俩都是二分查找的函数</p>
<p>lower_bound返回大于等于key的第一个元素的位置<br>upper_bound返回大于key的第一个元素的位置</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor">#<span class="keyword">include</span>&lt;cstdio&gt;</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span>&lt;cstring&gt;</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span>&lt;algorithm&gt;</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a[] = &#123;<span class="number">20</span>, <span class="number">20</span>, <span class="number">30</span>, <span class="number">40</span>, <span class="number">50</span>&#125;;</span><br><span class="line">    <span class="keyword">int</span> l, r;</span><br><span class="line">    l = lower_bound(a, a + <span class="number">5</span>, <span class="number">20</span>) - a;</span><br><span class="line">    r = upper_bound(a, a + <span class="number">5</span>, <span class="number">20</span>) - a;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d %d\n"</span>, l, r);</span><br><span class="line">    l = lower_bound(a, a + <span class="number">5</span>, <span class="number">10</span>) - a;</span><br><span class="line">    r = upper_bound(a, a + <span class="number">5</span>, <span class="number">10</span>) - a;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d %d\n"</span>, l, r);</span><br><span class="line">    l = lower_bound(a, a + <span class="number">5</span>, <span class="number">50</span>) - a;</span><br><span class="line">    r = upper_bound(a, a + <span class="number">5</span>, <span class="number">50</span>) - a;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d %d\n"</span>, l, r);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//输出为：</span></span><br><span class="line"><span class="comment">//0 2</span></span><br><span class="line"><span class="comment">//0 0</span></span><br><span class="line"><span class="comment">//4 5</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>Q3：给定一个n元实数集合，一个实数t，一个整数k，是否存在一个k元子集，其元素之和不超过t？</p>
</blockquote>
<p>这道题第一想法就是找出前k个最小的数，看它们的和是否超过t，这样问题转化为：在n个数中，找出前k个最小的数。<br>解法就是，建一个大小为k的最小堆，然后遍历所有元素，复杂度为$O(nlogk)$</p>
<p>但是仔细想下，对于这个问题，我们只需要找到前k个最小的数即可，而这些数之间的大小关系我们并不需要知道，由此想到了什么？<br>当然是快排的步骤中，枢轴左边的数全都小于枢轴元素，我们可以借鉴这个思想，就把问题转化为：求n个数中的第k小数。<br>leetcode上有一道求第K大数的题，我的C代码如下：</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">findKthLargest</span><span class="params">(<span class="keyword">int</span>* nums, <span class="keyword">int</span> numsSize, <span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">    k = numsSize - k + <span class="number">1</span>;<span class="comment">//求第K大，我先把它转化为求第K小。。</span></span><br><span class="line">    <span class="keyword">int</span> l = <span class="number">0</span>, r = numsSize - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> i, j, t, m;</span><br><span class="line">    <span class="keyword">while</span>(l &lt;= r) &#123;</span><br><span class="line">        i = l, j = r + <span class="number">1</span>;</span><br><span class="line">        t = nums[l];</span><br><span class="line">        <span class="keyword">while</span>(<span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">do</span> &#123;</span><br><span class="line">                i++;</span><br><span class="line">            &#125;<span class="keyword">while</span>(i &lt;= r &amp;&amp; nums[i] &lt; t);</span><br><span class="line">            <span class="keyword">do</span> &#123;</span><br><span class="line">                j--;</span><br><span class="line">            &#125;<span class="keyword">while</span>(nums[j] &gt; t);</span><br><span class="line">            <span class="keyword">if</span>(i &gt; j) <span class="keyword">break</span>;</span><br><span class="line">            m = nums[i]; nums[i] = nums[j]; nums[j] = m;</span><br><span class="line">        &#125;</span><br><span class="line">        m = nums[l]; nums[l] = nums[j]; nums[j] = m;</span><br><span class="line">        <span class="comment">//以上为一次快排的交换步骤</span></span><br><span class="line">        <span class="keyword">if</span>(j == k - <span class="number">1</span>) <span class="keyword">return</span> nums[j];<span class="comment">//如果j==k-1，说明左边有k-1个数，也就是它是第k小的数</span></span><br><span class="line">        <span class="keyword">if</span>(j &gt; k - <span class="number">1</span>) r = j - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">else</span> l = j + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这样的复杂度为 $O(n)$</p>
]]></content>
    <summary type="html">
    <![CDATA[<blockquote>
<p>Q1：将一个n元一维向量向左旋转i个位置，也就是循环左移。例如：n=8，i=3时，abcdefgh翻转为defghabc。 </p>
</blockquote>]]>
    
    </summary>
    
      <category term="编程珠玑" scheme="http://yoursite.com/categories/%E7%BC%96%E7%A8%8B%E7%8F%A0%E7%8E%91/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[bitset]]></title>
    <link href="http://yoursite.com/2015/03/05/chapter1/"/>
    <id>http://yoursite.com/2015/03/05/chapter1/</id>
    <published>2015-03-05T13:06:53.000Z</published>
    <updated>2016-04-14T17:34:52.041Z</updated>
    <content type="html"><![CDATA[<p>条件：内存很少（约1MB），最多有1000万个数，所有数的范围都在0-1000万，没有重复数字</p>
<p>分析：一个int有32位，可以用每一位的0、1来表示一个数是否出现，这样一个int可以存32个数的信息（是否出现），这样可以用1.25MB存1000万个数</p>
<a id="more"></a>
<p>关键：使用位运算进行编码和解码</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor">#<span class="keyword">include</span>&lt;cstdio&gt;</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> BITSPERWORD 32</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> MASK 0x1f</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> SHIFT 5</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> N 10000000</span></span><br><span class="line"><span class="keyword">int</span> x[N/BITSPERWORD + <span class="number">1</span>];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">set</span><span class="params">(<span class="keyword">int</span> i)</span> </span>&#123;</span><br><span class="line">    x[i&gt;&gt;SHIFT] |= (<span class="number">1</span>&lt;&lt;(i&amp;MASK));</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">clr</span><span class="params">(<span class="keyword">int</span> i)</span> </span>&#123;</span><br><span class="line">    x[i&gt;&gt;SHIFT] &amp;= ~(<span class="number">1</span>&lt;&lt;(i&amp;MASK));</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">test</span><span class="params">(<span class="keyword">int</span> i)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x[i&gt;&gt;SHIFT] &amp; (<span class="number">1</span>&lt;&lt;(i&amp;MASK));</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; N; i++)</span><br><span class="line">        clr(i);</span><br><span class="line">    <span class="keyword">while</span> (~<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;i))</span><br><span class="line">        <span class="built_in">set</span>(i);</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; N; i++)</span><br><span class="line">        <span class="keyword">if</span> (test(i))</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, i);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>解释一下这个程序，它是一个int表示32个数，所以在操作的时候，先 i / 32 找到i在数组x中的存储位置，然后i % 32 找到i在这个int中存在第几位。<br>i &gt;&gt; SHIFT 右移5位，就相当于i / 32 找到在x中的位置<br>i &amp; MASK 与0000 0000 0000 0000 0000 0000 0001 1111做与运算，意思就是只保留最后5位二进制，相当于 i % 32，就跟我们常用i &amp; 1判断是不是奇数一个道理</p>
<p>以i=39为例：<br>首先它应该存在x中第二个位置的int中，下标为1，也就是39 / 32 = 1， 找到了x[1]<br>然后它应该在x[1]的第8位存储，也就是39 % 32 = 7，1左移7位，然后x[1]或等这个1000 0000，就是把这个bit位置为1，其他位不变<br>clr(39)，把该位置为0 找到位置之后取反 则只有该位为0 其他位都为1，将x[1]与等这个11111111..111 0111 1111，则此位置为0，其他位不变<br>test(39)，看该位是否为1 </p>
<p>如果内存严格限制为1MB，可以考虑使用多趟的外部排序，之后多路归并。<br>多路归并这里用到了败者树，因为如果K趟归并，需要比较(k - 1)次才能找到最小值，而这里使用败者树则logk就可以，复杂度上与堆相同。<br>但是败者树只有叶子结点存的信息，中间结点存的都是索引（取得是第几个外部文件的值），而堆中间结点也存的信息，无法直接知道是取得哪个外部文件中的值。败者树的结点为2k-1，堆为k。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>条件：内存很少（约1MB），最多有1000万个数，所有数的范围都在0-1000万，没有重复数字</p>
<p>分析：一个int有32位，可以用每一位的0、1来表示一个数是否出现，这样一个int可以存32个数的信息（是否出现），这样可以用1.25MB存1000万个数</p>]]>
    
    </summary>
    
      <category term="bitset" scheme="http://yoursite.com/tags/bitset/"/>
    
      <category term="编程珠玑" scheme="http://yoursite.com/categories/%E7%BC%96%E7%A8%8B%E7%8F%A0%E7%8E%91/"/>
    
  </entry>
  
</feed>